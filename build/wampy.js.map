{"version":3,"sources":["../src/wampy.js"],"names":["root","m","define","amd","exports","nodeName","module","Wampy","WAMP_MSG_SPEC","HELLO","WELCOME","ABORT","CHALLENGE","AUTHENTICATE","GOODBYE","ERROR","PUBLISH","PUBLISHED","SUBSCRIBE","SUBSCRIBED","UNSUBSCRIBE","UNSUBSCRIBED","EVENT","CALL","CANCEL","RESULT","REGISTER","REGISTERED","UNREGISTER","UNREGISTERED","INVOCATION","INTERRUPT","YIELD","WAMP_ERROR_MSG","SUCCESS","code","description","URI_ERROR","NO_BROKER","NO_CALLBACK_SPEC","INVALID_PARAM","NON_EXIST_UNSUBSCRIBE","NO_DEALER","RPC_ALREADY_REGISTERED","NON_EXIST_RPC_UNREG","NON_EXIST_RPC_INVOCATION","NON_EXIST_RPC_REQ_ID","NO_REALM","NO_WS_OR_URL","NO_CRA_CB_OR_ID","CRA_EXCEPTION","isNode","process","Object","prototype","toString","call","getServerUrlBrowser","url","scheme","port","test","window","location","protocol","hostname","getServerUrlNode","getWebSocket","protocols","ws","parsedUrl","WebSocket","MozWebSocket","options","version","_url","_protocols","_wamp_features","agent","roles","publisher","features","subscriber_blackwhite_listing","publisher_exclusion","publisher_identification","subscriber","caller","caller_identification","progressive_call_results","call_canceling","call_timeout","callee","_cache","sessionId","server_wamp_features","isSayingGoodbye","opStatus","reqId","timer","reconnectingAttempts","_ws","_wsQueue","_requests","_calls","_subscriptions","_subsTopics","Set","_rpcRegs","_rpcNames","_options","debug","autoReconnect","reconnectInterval","maxRetries","transportEncoding","realm","helloCustomDetails","authid","authmethods","onChallenge","onConnect","onClose","onError","onReconnect","onReconnectSuccess","msgpackCoder","_isPlainObject","_merge","connect","console","log","arguments","max","Math","floor","random","obj","l","length","i","attr","Array","isArray","constructor","topicURI","role","callbacks","flag","toUpperCase","_validateURI","uri","re","indexOf","msg","encode","e","Error","JSON","stringify","decode","Uint8Array","parse","push","_encode","readyState","send","shift","onopen","_wsOnOpen","onclose","_wsOnClose","event","onmessage","_wsOnMessage","onerror","_wsOnError","error","_authmethods","_log","split","binaryType","global","setTimeout","_wsReconnect","_resetState","data","id","p","_decode","_renewSubscriptions","_renewRegistrations","_send","message","close","Promise","resolve","reject","then","key","catch","topic","onEvent","add","onSuccess","has","delete","progress","rpc","results","_isArray","details","argsList","argsDict","_initWsCallbacks","subs","st","subscribe","rpcs","rn","rpcName","register","opts","authp","_setWsProtocols","_preReqChecks","_getReqId","splice","payload","advancedOptions","err","acknowledge","exclude","exclude_authid","exclude_authrole","eligible","eligible_authid","eligible_authrole","hasOwnProperty","exclude_me","disclose_me","receive_progress","timeout","mode"],"mappings":"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","file":"wampy.js","sourcesContent":["/**\n * Project: wampy.js\n *\n * https://github.com/KSDaemon/wampy.js\n *\n * A lightweight client-side implementation of\n * WAMP (The WebSocket Application Messaging Protocol v2)\n * http://wamp.ws\n *\n * Provides asynchronous RPC/PubSub over WebSocket.\n *\n * Copyright 2014 KSDaemon. Licensed under the MIT License.\n * See @license text at http://www.opensource.org/licenses/mit-license.php\n *\n */\n\n'use strict';\n\n// Module boilerplate to support browser globals and browserify and AMD.\n(function (root, m) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['exports'], m);\n    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {\n        // CommonJS\n        module.exports = m();\n    } else {\n        // Browser globals\n        root.Wampy = m();\n    }\n}(this, function () {\n\n    const WAMP_MSG_SPEC = {\n            HELLO: 1,\n            WELCOME: 2,\n            ABORT: 3,\n            CHALLENGE: 4,\n            AUTHENTICATE: 5,\n            GOODBYE: 6,\n            ERROR: 8,\n            PUBLISH: 16,\n            PUBLISHED: 17,\n            SUBSCRIBE: 32,\n            SUBSCRIBED: 33,\n            UNSUBSCRIBE: 34,\n            UNSUBSCRIBED: 35,\n            EVENT: 36,\n            CALL: 48,\n            CANCEL: 49,\n            RESULT: 50,\n            REGISTER: 64,\n            REGISTERED: 65,\n            UNREGISTER: 66,\n            UNREGISTERED: 67,\n            INVOCATION: 68,\n            INTERRUPT: 69,\n            YIELD: 70\n        },\n\n        WAMP_ERROR_MSG = {\n            SUCCESS: {\n                code: 0,\n                description: 'Success!'\n            },\n            URI_ERROR: {\n                code: 1,\n                description: 'Topic URI doesn\\'t meet requirements!'\n            },\n            NO_BROKER: {\n                code: 2,\n                description: 'Server doesn\\'t provide broker role!'\n            },\n            NO_CALLBACK_SPEC: {\n                code: 3,\n                description: 'No required callback function specified!'\n            },\n            INVALID_PARAM: {\n                code: 4,\n                description: 'Invalid parameter(s) specified!'\n            },\n            NON_EXIST_UNSUBSCRIBE: {\n                code: 7,\n                description: 'Trying to unsubscribe from non existent subscription!'\n            },\n            NO_DEALER: {\n                code: 12,\n                description: 'Server doesn\\'t provide dealer role!'\n            },\n            RPC_ALREADY_REGISTERED: {\n                code: 15,\n                description: 'RPC already registered!'\n            },\n            NON_EXIST_RPC_UNREG: {\n                code: 17,\n                description: 'Received rpc unregistration for non existent rpc!'\n            },\n            NON_EXIST_RPC_INVOCATION: {\n                code: 19,\n                description: 'Received invocation for non existent rpc!'\n            },\n            NON_EXIST_RPC_REQ_ID: {\n                code: 20,\n                description: 'No RPC calls in action with specified request ID!'\n            },\n            NO_REALM: {\n                code: 21,\n                description: 'No realm specified!'\n            },\n            NO_WS_OR_URL: {\n                code: 22,\n                description: 'No websocket provided or URL specified is incorrect!'\n            },\n            NO_CRA_CB_OR_ID: {\n                code: 23,\n                description: 'No onChallenge callback or authid was provided for authentication!'\n            },\n            CRA_EXCEPTION: {\n                code: 24,\n                description: 'Exception raised during CRA challenge processing'\n            }\n        },\n\n        isNode = (typeof process === 'object' && Object.prototype.toString.call(process) === '[object process]');\n\n    function getServerUrlBrowser (url) {\n        let scheme, port;\n\n        if (/^ws(s)?:\\/\\//.test(url)) {   // ws scheme is specified\n            return url;\n        }\n\n        scheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';\n\n        if (!url) {\n            port = window.location.port !== '' ? ':' + window.location.port : '';\n            return scheme + window.location.hostname + port + '/ws';\n        } else if (url[0] === '/') {    // just path on current server\n            port = window.location.port !== '' ? ':' + window.location.port : '';\n            return scheme + window.location.hostname + port + url;\n        } else {    // domain\n            return scheme + url;\n        }\n    }\n\n    function getServerUrlNode (url) {\n        if (/^ws(s)?:\\/\\//.test(url)) {   // ws scheme is specified\n            return url;\n        } else {\n            return null;\n        }\n    }\n\n    function getWebSocket (url, protocols, ws) {\n        const parsedUrl = isNode ? getServerUrlNode(url) : getServerUrlBrowser(url);\n\n        if (!parsedUrl) {\n            return null;\n        }\n\n        if (ws) {   // User provided webSocket class\n            return new ws(parsedUrl, protocols);\n        } else if (isNode) {    // we're in node, but no webSocket provided\n            return null;\n        } else if ('WebSocket' in window) {\n            // Chrome, MSIE, newer Firefox\n            return new window.WebSocket(parsedUrl, protocols);\n        } else if ('MozWebSocket' in window) {\n            // older versions of Firefox\n            return new window.MozWebSocket(parsedUrl, protocols);\n        }\n\n        return null;\n    }\n\n    /**\n     * WAMP Client Class\n     */\n    class Wampy {\n\n        /**\n         * Wampy constructor\n         * @param {string} url\n         * @param {Object} options\n         */\n        constructor (url, options) {\n\n            /**\n             * Wampy version\n             * @type {string}\n             * @private\n             */\n            this.version = 'v4.1.0';\n\n            /**\n             * WS Url\n             * @type {string}\n             * @private\n             */\n            this._url = (typeof url === 'string') ? url : null;\n\n            /**\n             * WS protocols\n             * @type {Array}\n             * @private\n             */\n            this._protocols = ['wamp.2.json'];\n\n            /**\n             * WAMP features, supported by Wampy\n             * @type {object}\n             * @private\n             */\n            this._wamp_features = {\n                agent: 'Wampy.js ' + this.version,\n                roles: {\n                    publisher: {\n                        features: {\n                            subscriber_blackwhite_listing: true,\n                            publisher_exclusion: true,\n                            publisher_identification: true\n                        }\n                    },\n                    subscriber: {},\n                    caller: {\n                        features: {\n                            caller_identification: true,\n                            progressive_call_results: true,\n                            call_canceling: true,\n                            call_timeout: true\n                        }\n                    },\n                    callee: {\n                        features: {\n                            caller_identification: true\n                        }\n                    }\n                }\n            };\n\n            /**\n             * Internal cache for object lifetime\n             * @type {Object}\n             * @private\n             */\n            this._cache = {\n                /**\n                 * WAMP Session ID\n                 * @type {string}\n                 */\n                sessionId: null,\n\n                /**\n                 * Server WAMP roles and features\n                 */\n                server_wamp_features: { roles: {} },\n\n                /**\n                 * Are we in state of saying goodbye\n                 * @type {boolean}\n                 */\n                isSayingGoodbye: false,\n\n                /**\n                 * Status of last operation\n                 */\n                opStatus: { code: 0, description: 'Success!', reqId: 0 },\n\n                /**\n                 * Timer for reconnection\n                 * @type {null}\n                 */\n                timer: null,\n\n                /**\n                 * Reconnection attempts\n                 * @type {number}\n                 */\n                reconnectingAttempts: 0\n            };\n\n            /**\n             * WebSocket object\n             * @type {Object}\n             * @private\n             */\n            this._ws = null;\n\n            /**\n             * Internal queue for websocket requests, for case of disconnect\n             * @type {Array}\n             * @private\n             */\n            this._wsQueue = [];\n\n            /**\n             * Internal queue for wamp requests\n             * @type {object}\n             * @private\n             */\n            this._requests = {};\n\n            /**\n             * Stored RPC\n             * @type {object}\n             * @private\n             */\n            this._calls = {};\n\n            /**\n             * Stored Pub/Sub\n             * @type {object}\n             * @private\n             */\n            this._subscriptions = {};\n\n            /**\n             * Stored Pub/Sub topics\n             * @type {Array}\n             * @private\n             */\n            this._subsTopics = new Set();\n\n            /**\n             * Stored RPC Registrations\n             * @type {object}\n             * @private\n             */\n            this._rpcRegs = {};\n\n            /**\n             * Stored RPC names\n             * @type {Array}\n             * @private\n             */\n            this._rpcNames = new Set();\n\n            /**\n             * Options hash-table\n             * @type {Object}\n             * @private\n             */\n            this._options = {\n                /**\n                 * Logging\n                 * @type {boolean}\n                 */\n                debug: false,\n\n                /**\n                 * Reconnecting flag\n                 * @type {boolean}\n                 */\n                autoReconnect: true,\n\n                /**\n                 * Reconnecting interval (in ms)\n                 * @type {number}\n                 */\n                reconnectInterval: 2 * 1000,\n\n                /**\n                 * Maximum reconnection retries\n                 * @type {number}\n                 */\n                maxRetries: 25,\n\n                /**\n                 * Message serializer\n                 * @type {string}\n                 */\n                transportEncoding: 'json',\n\n                /**\n                 * WAMP Realm to join\n                 * @type {string}\n                 */\n                realm: null,\n\n                /**\n                 * Custom attributes to send to router on hello\n                 * @type {object}\n                 */\n                helloCustomDetails: null,\n\n                /**\n                 * Authentication id to use in challenge\n                 * @type {string}\n                 */\n                authid: null,\n\n                /**\n                 * Supported authentication methods\n                 * @type {array}\n                 */\n                authmethods: [],\n\n                /**\n                 * onChallenge callback\n                 * @type {function}\n                 */\n                onChallenge: null,\n\n                /**\n                 * onConnect callback\n                 * @type {function}\n                 */\n                onConnect: null,\n\n                /**\n                 * onClose callback\n                 * @type {function}\n                 */\n                onClose: null,\n\n                /**\n                 * onError callback\n                 * @type {function}\n                 */\n                onError: null,\n\n                /**\n                 * onReconnect callback\n                 * @type {function}\n                 */\n                onReconnect: null,\n\n                /**\n                 * onReconnectSuccess callback\n                 * @type {function}\n                 */\n                onReconnectSuccess: null,\n\n                /**\n                 * User provided WebSocket class\n                 * @type {function}\n                 */\n                ws: null,\n\n                /**\n                 * User provided msgpack class\n                 * @type {function}\n                 */\n                msgpackCoder: null\n            };\n\n            if (this._isPlainObject(options)) {\n                this._options = this._merge(this._options, options);\n            } else if (this._isPlainObject(url)) {\n                this._options = this._merge(this._options, url);\n            }\n\n            this.connect();\n        }\n\n        /* Internal utils methods */\n        /**\n         * Internal logger\n         * @private\n         */\n        _log () {\n            if (this._options.debug) {\n                console.log(arguments);\n            }\n        }\n\n        /**\n         * Get the new unique request id\n         * @returns {number}\n         * @private\n         */\n        _getReqId () {\n            let reqId;\n            const max = 2 ^ 53;\n\n            do {\n                reqId = Math.floor(Math.random() * max);\n            } while (reqId in this._requests);\n\n            return reqId;\n        }\n\n        /**\n         * Merge argument objects into one\n         * @returns {Object}\n         * @private\n         */\n        _merge () {\n            const obj = {}, l = arguments.length;\n            let i, attr;\n\n            for (i = 0; i < l; i++) {\n                for (attr in arguments[i]) {\n                    obj[attr] = arguments[i][attr];\n                }\n            }\n\n            return obj;\n        }\n\n        /**\n         * Check if value is array\n         * @param obj\n         * @returns {boolean}\n         * @private\n         */\n        _isArray (obj) {\n            return (!!obj) && (Array.isArray(obj));\n        }\n\n        /**\n         * Check if value is object literal\n         * @param obj\n         * @returns {boolean}\n         * @private\n         */\n        _isPlainObject (obj) {\n            return (!!obj) && (obj.constructor === Object);\n        }\n\n        /**\n         * Fix websocket protocols based on options\n         * @private\n         */\n        _setWsProtocols () {\n            if (this._options.msgpackCoder) {\n                if (this._options.transportEncoding === 'msgpack') {\n                    this._protocols = ['wamp.2.msgpack', 'wamp.2.json'];\n                } else {\n                    this._protocols = ['wamp.2.json', 'wamp.2.msgpack'];\n                }\n            }\n        }\n\n        /**\n         * Prerequisite checks for any wampy api call\n         * @param {string} topicURI\n         * @param {string} role\n         * @param {object} callbacks\n         * @returns {boolean}\n         * @private\n         */\n        _preReqChecks (topicURI, role, callbacks) {\n            let flag = true;\n\n            if (this._cache.sessionId && !this._cache.server_wamp_features.roles[role]) {\n                this._cache.opStatus = WAMP_ERROR_MSG['NO_' + role.toUpperCase()];\n                flag = false;\n            }\n\n            if (topicURI && !this._validateURI(topicURI)) {\n                this._cache.opStatus = WAMP_ERROR_MSG.URI_ERROR;\n                flag = false;\n            }\n\n            if (flag) {\n                return true;\n            }\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError(this._cache.opStatus.description);\n            }\n\n            return false;\n        }\n\n        /**\n         * Validate uri\n         * @param {string} uri\n         * @returns {boolean}\n         * @private\n         */\n        _validateURI (uri) {\n            const re = /^([0-9a-zA-Z_]{2,}\\.)*([0-9a-zA-Z_]{2,})$/;\n            return !(!re.test(uri) || uri.indexOf('wamp') === 0);\n        }\n\n        /**\n         * Encode WAMP message\n         * @param {Array} msg\n         * @returns {*}\n         * @private\n         */\n        _encode (msg) {\n\n            if (this._options.transportEncoding === 'msgpack' && this._options.msgpackCoder) {\n                try {\n                    return this._options.msgpackCoder.encode(msg);\n                } catch (e) {\n                    throw new Error('[wampy] msgpack encode exception!');\n                }\n            } else {\n                return JSON.stringify(msg);\n            }\n        }\n\n        /**\n         * Decode WAMP message\n         * @param  msg\n         * @returns {array}\n         * @private\n         */\n        _decode (msg) {\n            if (this._options.transportEncoding === 'msgpack' && this._options.msgpackCoder) {\n                try {\n                    return this._options.msgpackCoder.decode(new Uint8Array(msg));\n                } catch (e) {\n                    throw new Error('[wampy] msgpack decode exception!');\n                }\n            } else {\n                return JSON.parse(msg);\n            }\n        }\n\n        /**\n         * Send encoded message to server\n         * @param {Array} msg\n         * @private\n         */\n        _send (msg) {\n            if (msg) {\n                this._wsQueue.push(this._encode(msg));\n            }\n\n            if (this._ws && this._ws.readyState === 1 && this._cache.sessionId) {\n                while (this._wsQueue.length) {\n                    this._ws.send(this._wsQueue.shift());\n                }\n            }\n        }\n\n        /**\n         * Reset internal state and cache\n         * @private\n         */\n        _resetState () {\n            this._wsQueue = [];\n            this._subscriptions = {};\n            this._subsTopics = new Set();\n            this._requests = {};\n            this._calls = {};\n            this._rpcRegs = {};\n            this._rpcNames = new Set();\n\n            // Just keep attrs that are have to be present\n            this._cache = {\n                reconnectingAttempts: 0\n            };\n        }\n\n        /**\n         * Initialize internal websocket callbacks\n         * @private\n         */\n        _initWsCallbacks () {\n            if (this._ws) {\n                this._ws.onopen = () => { this._wsOnOpen(); };\n                this._ws.onclose = event => { this._wsOnClose(event); };\n                this._ws.onmessage = event => { this._wsOnMessage(event); };\n                this._ws.onerror = error => { this._wsOnError(error); };\n            }\n        }\n\n        _wsOnOpen () {\n            const options = this._merge(this._options.helloCustomDetails, this._wamp_features);\n\n            if (this._options.authid) {\n                options.authmethods = this._options._authmethods;\n                options.authid = this._options.authid;\n            }\n\n            this._log('[wampy] websocket connected');\n\n            if (this._ws.protocol) {\n                this._options.transportEncoding = this._ws.protocol.split('.')[2];\n            }\n\n            if (this._options.transportEncoding === 'msgpack') {\n                this._ws.binaryType = 'arraybuffer';\n            }\n\n            // WAMP SPEC: [HELLO, Realm|uri, Details|dict]\n            // Sending directly 'cause it's a hello msg and no sessionId check is needed\n            this._ws.send(this._encode([WAMP_MSG_SPEC.HELLO, this._options.realm, options]));\n        }\n\n        _wsOnClose (event) {\n            const root = isNode ? global : window;\n            this._log('[wampy] websocket disconnected. Info: ', event);\n\n            // Automatic reconnection\n            if ((this._cache.sessionId || this._cache.reconnectingAttempts) &&\n                this._options.autoReconnect && this._cache.reconnectingAttempts < this._options.maxRetries &&\n                !this._cache.isSayingGoodbye) {\n                this._cache.sessionId = null;\n                this._cache.timer = root.setTimeout(\n                    () => { this._wsReconnect(); },\n                    this._options.reconnectInterval\n                );\n            } else {\n                // No reconnection needed or reached max retries count\n                if (this._options.onClose) {\n                    this._options.onClose();\n                }\n\n                this._resetState();\n                this._ws = null;\n            }\n        }\n\n        _wsOnMessage (event) {\n            let data, id, i, msg, p;\n\n            this._log('[wampy] websocket message received', event.data);\n\n            data = this._decode(event.data);\n\n            switch (data[0]) {\n                case WAMP_MSG_SPEC.WELCOME:\n                    // WAMP SPEC: [WELCOME, Session|id, Details|dict]\n\n                    this._cache.sessionId = data[1];\n                    this._cache.server_wamp_features = data[2];\n\n                    if (this._cache.reconnectingAttempts) {\n                        // There was reconnection\n\n                        this._cache.reconnectingAttempts = 0;\n\n                        if (this._options.onReconnectSuccess) {\n                            this._options.onReconnectSuccess();\n                        }\n\n                        // Let's renew all previous state\n                        this._renewSubscriptions();\n                        this._renewRegistrations();\n\n                    } else {\n                        // Firing onConnect event on real connection to WAMP server\n                        if (this._options.onConnect) {\n                            this._options.onConnect();\n                        }\n                    }\n\n                    // Send local queue if there is something out there\n                    this._send();\n\n                    break;\n                case WAMP_MSG_SPEC.ABORT:\n                    // WAMP SPEC: [ABORT, Details|dict, Reason|uri]\n                    if (this._options.onError) {\n                        this._options.onError(data[1].message ? data[1].message : data[2]);\n                    }\n                    this._ws.close();\n                    break;\n                case WAMP_MSG_SPEC.CHALLENGE:\n                    // WAMP SPEC: [CHALLENGE, AuthMethod|string, Extra|dict]\n\n                    if (this._options.authid && typeof this._options.onChallenge === 'function') {\n\n                        p = new Promise((resolve, reject) => {\n                            resolve(this._options.onChallenge(data[1], data[2]));\n                        });\n\n                        p.then((key) => {\n\n                            // Sending directly 'cause it's a challenge msg and no sessionId check is needed\n                            this._ws.send(this._encode([WAMP_MSG_SPEC.AUTHENTICATE, key, {}]));\n\n                        }).catch(e => {\n                            this._ws.send(this._encode([\n                                WAMP_MSG_SPEC.ABORT,\n                                { message: 'Exception in onChallenge handler raised!' },\n                                'wamp.error.cannot_authenticate'\n                            ]));\n                            if (this._options.onError) {\n                                this._options.onError(WAMP_ERROR_MSG.CRA_EXCEPTION.description);\n                            }\n                            this._ws.close();\n                            this._cache.opStatus = WAMP_ERROR_MSG.CRA_EXCEPTION;\n                        });\n\n                    } else {\n\n                        this._ws.send(this._encode([\n                            WAMP_MSG_SPEC.ABORT,\n                            { message: WAMP_ERROR_MSG.NO_CRA_CB_OR_ID.description },\n                            'wamp.error.cannot_authenticate'\n                        ]));\n                        if (this._options.onError) {\n                            this._options.onError(WAMP_ERROR_MSG.NO_CRA_CB_OR_ID.description);\n                        }\n                        this._ws.close();\n                        this._cache.opStatus = WAMP_ERROR_MSG.NO_CRA_CB_OR_ID;\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.GOODBYE:\n                    // WAMP SPEC: [GOODBYE, Details|dict, Reason|uri]\n                    if (!this._cache.isSayingGoodbye) {    // get goodbye, initiated by server\n                        this._cache.isSayingGoodbye = true;\n                        this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.error.goodbye_and_out']);\n                    }\n                    this._cache.sessionId = null;\n                    this._ws.close();\n                    break;\n                case WAMP_MSG_SPEC.ERROR:\n                    // WAMP SPEC: [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict,\n                    //             Error|uri, (Arguments|list, ArgumentsKw|dict)]\n                    switch (data[1]) {\n                        case WAMP_MSG_SPEC.SUBSCRIBE:\n                        case WAMP_MSG_SPEC.UNSUBSCRIBE:\n                        case WAMP_MSG_SPEC.PUBLISH:\n                        case WAMP_MSG_SPEC.REGISTER:\n                        case WAMP_MSG_SPEC.UNREGISTER:\n\n                            this._requests[data[2]] && this._requests[data[2]].callbacks.onError &&\n                            this._requests[data[2]].callbacks.onError(data[4], data[3], data[5], data[6]);\n                            delete this._requests[data[2]];\n\n                            break;\n                        case WAMP_MSG_SPEC.INVOCATION:\n                            break;\n                        case WAMP_MSG_SPEC.CALL:\n\n                            // WAMP SPEC: [ERROR, CALL, CALL.Request|id, Details|dict,\n                            //             Error|uri, Arguments|list, ArgumentsKw|dict]\n                            this._calls[data[2]] && this._calls[data[2]].onError &&\n                            this._calls[data[2]].onError(data[4], data[3], data[5], data[6]);\n                            delete this._calls[data[2]];\n\n                            break;\n                        default:\n                            this._log('[wampy] Received non-compliant WAMP ERROR message');\n                            break;\n                    }\n                    break;\n                case WAMP_MSG_SPEC.SUBSCRIBED:\n                    // WAMP SPEC: [SUBSCRIBED, SUBSCRIBE.Request|id, Subscription|id]\n                    if (this._requests[data[1]]) {\n                        this._subscriptions[this._requests[data[1]].topic] = this._subscriptions[data[2]] = {\n                            id: data[2],\n                            callbacks: [this._requests[data[1]].callbacks.onEvent]\n                        };\n\n                        this._subsTopics.add(this._requests[data[1]].topic);\n\n                        if (this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.UNSUBSCRIBED:\n                    // WAMP SPEC: [UNSUBSCRIBED, UNSUBSCRIBE.Request|id]\n                    if (this._requests[data[1]]) {\n                        id = this._subscriptions[this._requests[data[1]].topic].id;\n                        delete this._subscriptions[this._requests[data[1]].topic];\n                        delete this._subscriptions[id];\n\n                        if (this._subsTopics.has(this._requests[data[1]].topic)) {\n                            this._subsTopics.delete(this._requests[data[1]].topic);\n                        }\n\n                        if (this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                    break;\n                case WAMP_MSG_SPEC.PUBLISHED:\n                    // WAMP SPEC: [PUBLISHED, PUBLISH.Request|id, Publication|id]\n                    if (this._requests[data[1]]) {\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.EVENT:\n                    if (this._subscriptions[data[1]]) {\n\n                        // WAMP SPEC: [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id,\n                        //             Details|dict, PUBLISH.Arguments|list, PUBLISH.ArgumentKw|dict]\n\n                        i = this._subscriptions[data[1]].callbacks.length;\n                        while (i--) {\n                            this._subscriptions[data[1]].callbacks[i](data[4], data[5]);\n                        }\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.RESULT:\n                    if (this._calls[data[1]]) {\n\n                        // WAMP SPEC: [RESULT, CALL.Request|id, Details|dict,\n                        //             YIELD.Arguments|list, YIELD.ArgumentsKw|dict]\n\n                        this._calls[data[1]].onSuccess(data[3], data[4]);\n                        if (!(data[2].progress && data[2].progress === true)) {\n                            // We receive final result (progressive or not)\n                            delete this._calls[data[1]];\n                        }\n\n                    }\n                    break;\n                // case WAMP_MSG_SPEC.REGISTER:\n                //     // WAMP SPEC:\n                //     break;\n                case WAMP_MSG_SPEC.REGISTERED:\n                    // WAMP SPEC: [REGISTERED, REGISTER.Request|id, Registration|id]\n                    if (this._requests[data[1]]) {\n                        this._rpcRegs[this._requests[data[1]].topic] = this._rpcRegs[data[2]] = {\n                            id: data[2],\n                            callbacks: [this._requests[data[1]].callbacks.rpc]\n                        };\n\n                        this._rpcNames.add(this._requests[data[1]].topic);\n\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n\n                    }\n                    break;\n                // case WAMP_MSG_SPEC.UNREGISTER:\n                //     // WAMP SPEC:\n                //     break;\n                case WAMP_MSG_SPEC.UNREGISTERED:\n                    // WAMP SPEC: [UNREGISTERED, UNREGISTER.Request|id]\n                    if (this._requests[data[1]]) {\n                        id = this._rpcRegs[this._requests[data[1]].topic].id;\n                        delete this._rpcRegs[this._requests[data[1]].topic];\n                        delete this._rpcRegs[id];\n\n                        if (this._rpcNames.has(this._requests[data[1]].topic)) {\n                            this._rpcNames.delete(this._requests[data[1]].topic);\n                        }\n\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                    break;\n                case WAMP_MSG_SPEC.INVOCATION:\n                    if (this._rpcRegs[data[2]]) {\n\n                        // WAMP SPEC: [INVOCATION, Request|id, REGISTERED.Registration|id,\n                        //             Details|dict, CALL.Arguments|list, CALL.ArgumentsKw|dict]\n\n                        p = new Promise((resolve, reject) => {\n                            resolve(this._rpcRegs[data[2]].callbacks[0](data[4], data[5], data[3]));\n                        });\n\n                        p.then((results) => {\n                            // WAMP SPEC: [YIELD, INVOCATION.Request|id, Options|dict, (Arguments|list, ArgumentsKw|dict)]\n                            msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n                            if (this._isArray(results)) {\n                                // Options\n                                if (this._isPlainObject(results[0])) {\n                                    msg[2] = results[0];\n                                }\n\n                                if (this._isArray(results[1])) {\n                                    msg.push(results[1]);\n                                } else if (typeof (results[1]) !== 'undefined') {\n                                    msg.push([results[1]]);\n                                }\n\n                                if (this._isPlainObject(results[2])) {\n                                    if (msg.length === 3) {\n                                        msg.push([]);\n                                    }\n                                    msg.push(results[2]);\n                                }\n                            } else {\n                                msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n                            }\n                            this._send(msg);\n\n                        }).catch(e => {\n                            let msg = [WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                                data[1], e.details || {}, e.uri || 'wamp.error.invocation_exception'];\n\n                            if (e.argsList && this._isArray(e.argsList)) {\n                                msg.push(e.argsList);\n                            }\n\n                            if (e.argsDict && this._isPlainObject(e.argsDict)) {\n                                if (msg.length === 5) {\n                                    msg.push([]);\n                                }\n                                msg.push(e.argsDict);\n                            }\n                            this._send(msg);\n                        });\n\n                    } else {\n                        // WAMP SPEC: [ERROR, INVOCATION, INVOCATION.Request|id, Details|dict, Error|uri]\n                        this._send([WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                            data[1], {}, 'wamp.error.no_such_procedure']);\n                        this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_INVOCATION;\n                    }\n\n                    break;\n                // case WAMP_MSG_SPEC.INTERRUPT:\n                //     // WAMP SPEC:\n                //     break;\n                // case WAMP_MSG_SPEC.YIELD:\n                //     // WAMP SPEC:\n                //     break;\n                default:\n                    this._log('[wampy] Received non-compliant WAMP message');\n                    break;\n            }\n        }\n\n        _wsOnError (error) {\n            this._log('[wampy] websocket error');\n\n            if (this._options.onError) {\n                this._options.onError(error);\n            }\n        }\n\n        _wsReconnect () {\n            this._log('[wampy] websocket reconnecting...');\n\n            if (this._options.onReconnect) {\n                this._options.onReconnect();\n            }\n\n            this._cache.reconnectingAttempts++;\n            this._ws = getWebSocket(this._url, this._protocols, this._options.ws);\n            this._initWsCallbacks();\n        }\n\n        _renewSubscriptions () {\n            let i;\n            const subs = this._subscriptions,\n                st = this._subsTopics;\n\n            this._subscriptions = {};\n            this._subsTopics = new Set();\n\n            for (let topic of st) {\n                i = subs[topic].callbacks.length;\n                while (i--) {\n                    this.subscribe(topic, subs[topic].callbacks[i]);\n                }\n            }\n        }\n\n        _renewRegistrations () {\n            const rpcs = this._rpcRegs,\n                rn = this._rpcNames;\n\n            this._rpcRegs = {};\n            this._rpcNames = new Set();\n\n            for (let rpcName of rn) {\n                this.register(rpcName, { rpc: rpcs[rpcName].callbacks[0] });\n            }\n        }\n\n        /* Wampy public API */\n\n        /**\n         * Get or set Wampy options\n         *\n         * To get options - call without parameters\n         * To set options - pass hash-table with options values\n         *\n         * @param {object} opts\n         * @returns {*}\n         */\n        options (opts) {\n            if (typeof (opts) === 'undefined') {\n                return this._options;\n            } else if (this._isPlainObject(opts)) {\n                this._options = this._merge(this._options, opts);\n                return this;\n            }\n        }\n\n        /**\n         * Get the status of last operation\n         *\n         * @returns {object} with 2 fields: code, description\n         *      code: 0 - if operation was successful\n         *      code > 0 - if error occurred\n         *      description contains details about error\n         *      reqId: last send request ID\n         */\n        getOpStatus () {\n            return this._cache.opStatus;\n        }\n\n        /**\n         * Get the WAMP Session ID\n         *\n         * @returns {string} Session ID\n         */\n        getSessionId () {\n            return this._cache.sessionId;\n        }\n\n        /**\n         * Connect to server\n         * @param {string} url New url (optional)\n         * @returns {Wampy}\n         */\n        connect (url) {\n            if (url) {\n                this._url = url;\n            }\n\n            if (this._options.realm) {\n\n                const authp = (this._options.authid ? 1 : 0) +\n                    ((this._isArray(this._options.authmethods) && this._options.authmethods.length) ? 1 : 0) +\n                    (typeof this._options.onChallenge === 'function' ? 1 : 0);\n\n                if (authp > 0 && authp < 3) {\n                    this._cache.opStatus = WAMP_ERROR_MSG.NO_CRA_CB_OR_ID;\n                    return this;\n                }\n\n                this._setWsProtocols();\n                this._ws = getWebSocket(this._url, this._protocols, this._options.ws);\n                if (!this._ws) {\n                    this._cache.opStatus = WAMP_ERROR_MSG.NO_WS_OR_URL;\n                    return this;\n                }\n                this._initWsCallbacks();\n\n            } else {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_REALM;\n            }\n\n            return this;\n        }\n\n        /**\n         * Disconnect from server\n         * @returns {Wampy}\n         */\n        disconnect () {\n            if (this._cache.sessionId) {\n                // need to send goodbye message to server\n                this._cache.isSayingGoodbye = true;\n                this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.error.system_shutdown']);\n            } else if (this._ws) {\n                this._ws.close();\n            }\n\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n\n            return this;\n        }\n\n        /**\n         * Abort WAMP session establishment\n         *\n         * @returns {Wampy}\n         */\n        abort () {\n\n            if (!this._cache.sessionId && this._ws.readyState === 1) {\n                this._send([WAMP_MSG_SPEC.ABORT, {}, 'wamp.error.abort']);\n                this._cache.sessionId = null;\n            }\n\n            this._ws.close();\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n\n            return this;\n        }\n\n        /**\n         * Subscribe to a topic on a broker\n         *\n         * @param {string} topicURI\n         * @param {function|object} callbacks - if it is a function - it will be treated as published event callback\n         *                          or it can be hash table of callbacks:\n         *                          { onSuccess: will be called when subscribe would be confirmed\n         *                            onError: will be called if subscribe would be aborted\n         *                            onEvent: will be called on receiving published event }\n         *\n         * @returns {Wampy}\n         */\n        subscribe (topicURI, callbacks) {\n            let reqId;\n\n            if (!this._preReqChecks(topicURI, 'broker', callbacks)) {\n                return this;\n            }\n\n            if (typeof callbacks === 'function') {\n                callbacks = { onEvent: callbacks };\n            } else if (!this._isPlainObject(callbacks) || typeof (callbacks.onEvent) === 'undefined') {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (!this._subscriptions[topicURI] || !this._subscriptions[topicURI].callbacks.length) {\n                // no such subscription or processing unsubscribing\n\n                reqId = this._getReqId();\n\n                this._requests[reqId] = {\n                    topic: topicURI,\n                    callbacks: callbacks\n                };\n\n                // WAMP SPEC: [SUBSCRIBE, Request|id, Options|dict, Topic|uri]\n                this._send([WAMP_MSG_SPEC.SUBSCRIBE, reqId, {}, topicURI]);\n\n            } else {    // already have subscription to this topic\n                // There is no such callback yet\n                if (this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent) < 0) {\n                    this._subscriptions[topicURI].callbacks.push(callbacks.onEvent);\n                }\n\n                if (callbacks.onSuccess) {\n                    callbacks.onSuccess();\n                }\n            }\n\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n            return this;\n        }\n\n        /**\n         * Unsubscribe from topic\n         * @param {string} topicURI\n         * @param {function|object} callbacks - if it is a function - it will be treated as\n         *                          published event callback to remove or it can be hash table of callbacks:\n         *                          { onSuccess: will be called when unsubscribe would be confirmed\n         *                            onError: will be called if unsubscribe would be aborted\n         *                            onEvent: published event callback to remove }\n         * @returns {Wampy}\n         */\n        unsubscribe (topicURI, callbacks) {\n            let reqId, i = -1;\n\n            if (!this._preReqChecks(null, 'broker', callbacks)) {\n                return this;\n            }\n\n            if (this._subscriptions[topicURI]) {\n\n                reqId = this._getReqId();\n\n                if (typeof (callbacks) === 'undefined') {\n                    this._subscriptions[topicURI].callbacks = [];\n                    callbacks = {};\n                } else if (typeof callbacks === 'function') {\n                    i = this._subscriptions[topicURI].callbacks.indexOf(callbacks);\n                    callbacks = {};\n                } else if (callbacks.onEvent && typeof callbacks.onEvent === 'function') {\n                    i = this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent);\n                } else {\n                    this._subscriptions[topicURI].callbacks = [];\n                }\n\n                if (i >= 0) {\n                    this._subscriptions[topicURI].callbacks.splice(i, 1);\n                }\n\n                if (this._subscriptions[topicURI].callbacks.length) {\n                    // There are another callbacks for this topic\n                    this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n                    return this;\n                }\n\n                this._requests[reqId] = {\n                    topic: topicURI,\n                    callbacks: callbacks\n                };\n\n                // WAMP_SPEC: [UNSUBSCRIBE, Request|id, SUBSCRIBED.Subscription|id]\n                this._send([WAMP_MSG_SPEC.UNSUBSCRIBE, reqId, this._subscriptions[topicURI].id]);\n\n            } else {\n                this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_UNSUBSCRIBE;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n            return this;\n        }\n\n        /**\n         * Publish a event to topic\n         * @param {string} topicURI\n         * @param {string|number|Array|object} payload - optional parameter.\n         * @param {object} callbacks - optional hash table of callbacks:\n         *                          { onSuccess: will be called when publishing would be confirmed\n         *                            onError: will be called if publishing would be aborted }\n         * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n         *                          { exclude: integer|array WAMP session id(s) that won't receive a published event,\n         *                                      even though they may be subscribed\n         *                            exclude_authid: string|array Authentication id(s) that won't receive\n         *                                      a published event, even though they may be subscribed\n         *                            exclude_authrole: string|array Authentication role(s) that won't receive\n         *                                      a published event, even though they may be subscribed\n         *                            eligible: integer|array WAMP session id(s) that are allowed\n         *                                      to receive a published event\n         *                            eligible_authid: string|array Authentication id(s) that are allowed\n         *                                      to receive a published event\n         *                            eligible_authrole: string|array Authentication role(s) that are allowed\n         *                                      to receive a published event\n         *                            exclude_me: bool flag of receiving publishing event by initiator\n         *                            disclose_me: bool flag of disclosure of publisher identity (its WAMP session ID)\n         *                                      to receivers of a published event }\n         * @returns {Wampy}\n         */\n        publish (topicURI, payload, callbacks, advancedOptions) {\n            let reqId, msg, err = false;\n            const options = {};\n\n            if (!this._preReqChecks(topicURI, 'broker', callbacks)) {\n                return this;\n            }\n\n            if (this._isPlainObject(callbacks)) {\n                options.acknowledge = true;\n            }\n\n            if (typeof (advancedOptions) !== 'undefined') {\n\n                if (this._isPlainObject(advancedOptions)) {\n                    if (advancedOptions.exclude) {\n                        if (this._isArray(advancedOptions.exclude) && advancedOptions.exclude.length) {\n                            options.exclude = advancedOptions.exclude;\n                        } else if (typeof advancedOptions.exclude === 'number') {\n                            options.exclude = [advancedOptions.exclude];\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                    if (advancedOptions.exclude_authid) {\n                        if (this._isArray(advancedOptions.exclude_authid) && advancedOptions.exclude_authid.length) {\n                            options.exclude_authid = advancedOptions.exclude_authid;\n                        } else if (typeof advancedOptions.exclude_authid === 'string') {\n                            options.exclude_authid = [advancedOptions.exclude_authid];\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                    if (advancedOptions.exclude_authrole) {\n                        if (this._isArray(advancedOptions.exclude_authrole) && advancedOptions.exclude_authrole.length) {\n                            options.exclude_authrole = advancedOptions.exclude_authrole;\n                        } else if (typeof advancedOptions.exclude_authrole === 'string') {\n                            options.exclude_authrole = [advancedOptions.exclude_authrole];\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                    if (advancedOptions.eligible) {\n                        if (this._isArray(advancedOptions.eligible) && advancedOptions.eligible.length) {\n                            options.eligible = advancedOptions.eligible;\n                        } else if (typeof advancedOptions.eligible === 'number') {\n                            options.eligible = [advancedOptions.eligible];\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                    if (advancedOptions.eligible_authid) {\n                        if (this._isArray(advancedOptions.eligible_authid) && advancedOptions.eligible_authid.length) {\n                            options.eligible_authid = advancedOptions.eligible_authid;\n                        } else if (typeof advancedOptions.eligible_authid === 'string') {\n                            options.eligible_authid = [advancedOptions.eligible_authid];\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                    if (advancedOptions.eligible_authrole) {\n                        if (this._isArray(advancedOptions.eligible_authrole) && advancedOptions.eligible_authrole.length) {\n                            options.eligible_authrole = advancedOptions.eligible_authrole;\n                        } else if (typeof advancedOptions.eligible_authrole === 'string') {\n                            options.eligible_authrole = [advancedOptions.eligible_authrole];\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                    if (advancedOptions.hasOwnProperty('exclude_me')) {\n                        options.exclude_me = advancedOptions.exclude_me !== false;\n                    }\n\n                    if (advancedOptions.hasOwnProperty('disclose_me')) {\n                        options.disclose_me = advancedOptions.disclose_me === true;\n                    }\n\n                } else {\n                    err = true;\n                }\n\n                if (err) {\n                    this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                    if (this._isPlainObject(callbacks) && callbacks.onError) {\n                        callbacks.onError(this._cache.opStatus.description);\n                    }\n\n                    return this;\n                }\n            }\n\n            reqId = this._getReqId();\n\n            switch (arguments.length) {\n                case 1:\n                    // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri]\n                    msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI];\n                    break;\n                case 2:\n                    // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list (, ArgumentsKw|dict)]\n                    if (this._isArray(payload)) {\n                        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, payload];\n                    } else if (this._isPlainObject(payload)) {\n                        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, [], payload];\n                    } else {    // assume it's a single value\n                        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, [payload]];\n                    }\n                    break;\n                default:\n                    this._requests[reqId] = {\n                        topic: topicURI,\n                        callbacks: callbacks\n                    };\n\n                    // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list (, ArgumentsKw|dict)]\n                    if (this._isArray(payload)) {\n                        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, payload];\n                    } else if (this._isPlainObject(payload)) {\n                        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, [], payload];\n                    } else {    // assume it's a single value\n                        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, [payload]];\n                    }\n                    break;\n            }\n\n            this._send(msg);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n            return this;\n        }\n\n        /**\n         * Remote Procedure Call\n         * @param {string} topicURI\n         * @param {string|number|Array|object} payload - can be either a value of any type or null\n         * @param {function|object} callbacks - if it is a function - it will be treated as result callback function\n         *                          or it can be hash table of callbacks:\n         *                          { onSuccess: will be called with result on successful call\n         *                            onError: will be called if invocation would be aborted }\n         * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n         *                          { disclose_me: bool flag of disclosure of Caller identity (WAMP session ID)\n         *                                  to endpoints of a routed call\n         *                            receive_progress: bool flag for receiving progressive results. In this case\n         *                                  onSuccess function will be called every time on receiving result\n         *                            timeout: integer timeout (in ms) for the call to finish }\n         * @returns {Wampy}\n         */\n        call (topicURI, payload, callbacks, advancedOptions) {\n            let reqId, msg, err = false;\n            const options = {};\n\n            if (!this._preReqChecks(topicURI, 'dealer', callbacks)) {\n                return this;\n            }\n\n            if (typeof callbacks === 'function') {\n                callbacks = { onSuccess: callbacks };\n            } else if (!this._isPlainObject(callbacks) || typeof (callbacks.onSuccess) === 'undefined') {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (typeof (advancedOptions) !== 'undefined') {\n\n                if (this._isPlainObject(advancedOptions)) {\n                    if (advancedOptions.hasOwnProperty('disclose_me')) {\n                        options.disclose_me = advancedOptions.disclose_me === true;\n                    }\n\n                    if (advancedOptions.hasOwnProperty('receive_progress')) {\n                        options.receive_progress = advancedOptions.receive_progress === true;\n                    }\n\n                    if (advancedOptions.hasOwnProperty('timeout')) {\n                        if (typeof advancedOptions.timeout === 'number') {\n                            options.timeout = advancedOptions.timeout;\n                        } else {\n                            err = true;\n                        }\n                    }\n\n                } else {\n                    err = true;\n                }\n\n                if (err) {\n                    this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                    if (this._isPlainObject(callbacks) && callbacks.onError) {\n                        callbacks.onError(this._cache.opStatus.description);\n                    }\n\n                    return this;\n                }\n            }\n\n            do {\n                reqId = this._getReqId();\n            } while (reqId in this._calls);\n\n            this._calls[reqId] = callbacks;\n\n            // WAMP SPEC: [CALL, Request|id, Options|dict, Procedure|uri, (Arguments|list, ArgumentsKw|dict)]\n            if (payload === null) {\n                msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI];\n            } else {\n                if (this._isArray(payload)) {\n                    msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI, payload];\n                } else if (this._isPlainObject(payload)) {\n                    msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI, [], payload];\n                } else {    // assume it's a single value\n                    msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI, [payload]];\n                }\n            }\n\n            this._send(msg);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n            return this;\n        }\n\n        /**\n         * RPC invocation cancelling\n         *\n         * @param {int} reqId RPC call request ID\n         * @param {function|object} callbacks - if it is a function - it will be called if successfully\n         *                          sent canceling message or it can be hash table of callbacks:\n         *                          { onSuccess: will be called if successfully sent canceling message\n         *                            onError: will be called if some error occurred }\n         * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n         *                          { mode: string|one of the possible modes:\n         *                                  \"skip\" | \"kill\" | \"killnowait\". Skip is default.\n          *                          }\n         *\n         * @returns {Wampy}\n         */\n        cancel (reqId, callbacks, advancedOptions) {\n            const options = { mode: 'skip' };\n\n            if (!this._preReqChecks(null, 'dealer', callbacks)) {\n                return this;\n            }\n\n            if (!reqId || !this._calls[reqId]) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_REQ_ID;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if ((typeof (advancedOptions) !== 'undefined') &&\n                (this._isPlainObject(advancedOptions)) &&\n                (advancedOptions.hasOwnProperty('mode'))) {\n\n                options.mode = /skip|kill|killnowait/.test(advancedOptions.mode) ? advancedOptions.mode : 'skip' ;\n            }\n\n            // WAMP SPEC: [CANCEL, CALL.Request|id, Options|dict]\n            this._send([WAMP_MSG_SPEC.CANCEL, reqId, options]);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n\n            callbacks.onSuccess && callbacks.onSuccess();\n\n            return this;\n        }\n\n        /**\n         * RPC registration for invocation\n         * @param {string} topicURI\n         * @param {function|object} callbacks - if it is a function - it will be treated as rpc itself\n         *                          or it can be hash table of callbacks:\n         *                          { rpc: registered procedure\n         *                            onSuccess: will be called on successful registration\n         *                            onError: will be called if registration would be aborted }\n         * @returns {Wampy}\n         */\n        register (topicURI, callbacks) {\n            let reqId;\n\n            if (!this._preReqChecks(topicURI, 'dealer', callbacks)) {\n                return this;\n            }\n\n            if (typeof callbacks === 'function') {\n                callbacks = { rpc: callbacks };\n            } else if (!this._isPlainObject(callbacks) || typeof (callbacks.rpc) === 'undefined') {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n\n            if (!this._rpcRegs[topicURI] || !this._rpcRegs[topicURI].callbacks.length) {\n                // no such registration or processing unregistering\n\n                reqId = this._getReqId();\n\n                this._requests[reqId] = {\n                    topic: topicURI,\n                    callbacks: callbacks\n                };\n\n                // WAMP SPEC: [REGISTER, Request|id, Options|dict, Procedure|uri]\n                this._send([WAMP_MSG_SPEC.REGISTER, reqId, {}, topicURI]);\n                this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n                this._cache.opStatus.reqId = reqId;\n            } else {    // already have registration with such topicURI\n                this._cache.opStatus = WAMP_ERROR_MSG.RPC_ALREADY_REGISTERED;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n            }\n\n            return this;\n\n        }\n\n        /**\n         * RPC unregistration for invocation\n         * @param {string} topicURI\n         * @param {function|object} callbacks - if it is a function, it will be called on successful unregistration\n         *                          or it can be hash table of callbacks:\n         *                          { onSuccess: will be called on successful unregistration\n         *                            onError: will be called if unregistration would be aborted }\n         * @returns {Wampy}\n         */\n        unregister (topicURI, callbacks) {\n            let reqId;\n\n            if (!this._preReqChecks(topicURI, 'dealer', callbacks)) {\n                return this;\n            }\n\n            if (typeof callbacks === 'function') {\n                callbacks = { onSuccess: callbacks };\n            }\n\n            if (this._rpcRegs[topicURI]) {   // there is such registration\n\n                reqId = this._getReqId();\n\n                this._requests[reqId] = {\n                    topic: topicURI,\n                    callbacks: callbacks\n                };\n\n                // WAMP SPEC: [UNREGISTER, Request|id, REGISTERED.Registration|id]\n                this._send([WAMP_MSG_SPEC.UNREGISTER, reqId, this._rpcRegs[topicURI].id]);\n                this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n                this._cache.opStatus.reqId = reqId;\n            } else {    // there is no registration with such topicURI\n                this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_UNREG;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n            }\n\n            return this;\n        }\n    }\n\n    return Wampy;\n\n}));\n"]}