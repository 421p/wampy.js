{"version":3,"sources":["../../src/serializers/MsgpackSerializer.js"],"names":["msgpack","MsgpackSerializer","protocol","binaryType","data","encode","Promise","ArrayBuffer","resolve","decode","Uint8Array","reader","FileReader","onload","result","readAsArrayBuffer"],"mappings":";;;;;;;;;AAAA;;;;;;;;AACA,IAAMA,UAAU,wBAAhB;;IAEaC,iB,WAAAA,iB;AACT,iCAAe;AAAA;;AACX,aAAKC,QAAL,GAAgB,SAAhB;AACA,aAAKC,UAAL,GAAkB,aAAlB;AACH;;;;+BAEOC,I,EAAM;AACV,mBAAOJ,QAAQK,MAAR,CAAeD,IAAf,CAAP;AACH;;;+BAEOA,I,EAAM;AACV,mBAAO,IAAIE,OAAJ,CAAY,mBAAW;;AAE1B,oBAAIF,gBAAgBG,WAApB,EAAiC;AAC7BC,4BAAQR,QAAQS,MAAR,CAAe,IAAIC,UAAJ,CAAeN,IAAf,CAAf,CAAR;AACH,iBAFD,MAEO;AACH,wBAAMO,SAAS,IAAIC,UAAJ,EAAf;AACAD,2BAAOE,MAAP,GAAgB,YAAY;AACxBL,gCAAQ,IAAIE,UAAJ,CAAe,KAAKI,MAApB,CAAR;AACH,qBAFD;AAGAH,2BAAOI,iBAAP,CAAyBX,IAAzB;AACH;AAEJ,aAZM,CAAP;AAaH","file":"MsgpackSerializer.js","sourcesContent":["import msgpack5 from 'msgpack5';\nconst msgpack = msgpack5();\n\nexport class MsgpackSerializer {\n    constructor () {\n        this.protocol = 'msgpack';\n        this.binaryType = 'arraybuffer';\n    }\n\n    encode (data) {\n        return msgpack.encode(data);\n    }\n\n    decode (data) {\n        return new Promise(resolve => {\n\n            if (data instanceof ArrayBuffer) {\n                resolve(msgpack.decode(new Uint8Array(data)));\n            } else {\n                const reader = new FileReader();\n                reader.onload = function () {\n                    resolve(new Uint8Array(this.result));\n                };\n                reader.readAsArrayBuffer(data);\n            }\n\n        });\n    }\n}\n"]}