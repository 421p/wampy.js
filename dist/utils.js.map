{"version":3,"sources":["../src/utils.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;YA8BgB,Y,GAAA,Y;YAsBA,mB,GAAA,mB;;;AAlDhB,aAAS,mBAAT,CAA8B,GAA9B,EAAmC;AAC/B,YAAI,eAAJ;YAAY,aAAZ;;AAEA,YAAI,eAAe,IAAf,CAAoB,GAApB,CAAJ,EAA8B;;AAC1B,mBAAO,GAAP;AACH;;AAED,iBAAS,OAAO,QAAP,CAAgB,QAAhB,KAA6B,QAA7B,GAAwC,QAAxC,GAAmD,OAA5D;;AAEA,YAAI,CAAC,GAAL,EAAU;AACN,mBAAO,OAAO,QAAP,CAAgB,IAAhB,KAAyB,EAAzB,GAA8B,MAAM,OAAO,QAAP,CAAgB,IAApD,GAA2D,EAAlE;AACA,mBAAO,SAAS,OAAO,QAAP,CAAgB,QAAzB,GAAoC,IAApC,GAA2C,KAAlD;AACH,SAHD,MAGO,IAAI,IAAI,CAAJ,MAAW,GAAf,EAAoB;;AACvB,mBAAO,OAAO,QAAP,CAAgB,IAAhB,KAAyB,EAAzB,GAA8B,MAAM,OAAO,QAAP,CAAgB,IAApD,GAA2D,EAAlE;AACA,mBAAO,SAAS,OAAO,QAAP,CAAgB,QAAzB,GAAoC,IAApC,GAA2C,GAAlD;AACH,SAHM,MAGA;;AACH,mBAAO,SAAS,GAAhB;AACH;AACJ;;AAED,aAAS,gBAAT,CAA2B,GAA3B,EAAgC;AAC5B,YAAI,eAAe,IAAf,CAAoB,GAApB,CAAJ,EAA8B;;AAC1B,mBAAO,GAAP;AACH,SAFD,MAEO;AACH,mBAAO,IAAP;AACH;AACJ;;AAEM,aAAS,YAAT,CAAuB,GAAvB,EAA4B,SAA5B,EAAuC,EAAvC,EAA2C;AAC9C,YAAM,YAAY,oBAAS,iBAAiB,GAAjB,CAAT,GAAiC,oBAAoB,GAApB,CAAnD;;AAEA,YAAI,CAAC,SAAL,EAAgB;AACZ,mBAAO,IAAP;AACH;;AAED,YAAI,EAAJ,EAAQ;;AACJ,mBAAO,IAAI,EAAJ,CAAO,SAAP,EAAkB,SAAlB,CAAP;AACH,SAFD,MAEO,uBAAY;;AACf,mBAAO,IAAP;AACH,SAFM,MAEA,IAAI,eAAe,MAAnB,EAA2B;;AAE9B,mBAAO,IAAI,OAAO,SAAX,CAAqB,SAArB,EAAgC,SAAhC,CAAP;AACH,SAHM,MAGA,IAAI,kBAAkB,MAAtB,EAA8B;;AAEjC,mBAAO,IAAI,OAAO,YAAX,CAAwB,SAAxB,EAAmC,SAAnC,CAAP;AACH;;AAED,eAAO,IAAP;AACH;;AAEM,aAAS,mBAAT,CAA8B,IAA9B,EAAoC;AACvC,eAAO,gCAAqB,OAArB,CAA6B,IAA7B,MAAuC,CAAC,CAA/C;AACH","file":"utils.js","sourcesContent":["import { isNode, ALLOWED_BINARY_TYPES } from './constants';\n\nfunction getServerUrlBrowser (url) {\n    let scheme, port;\n\n    if (/^ws(s)?:\\/\\//.test(url)) {   // ws scheme is specified\n        return url;\n    }\n\n    scheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';\n\n    if (!url) {\n        port = window.location.port !== '' ? ':' + window.location.port : '';\n        return scheme + window.location.hostname + port + '/ws';\n    } else if (url[0] === '/') {    // just path on current server\n        port = window.location.port !== '' ? ':' + window.location.port : '';\n        return scheme + window.location.hostname + port + url;\n    } else {    // domain\n        return scheme + url;\n    }\n}\n\nfunction getServerUrlNode (url) {\n    if (/^ws(s)?:\\/\\//.test(url)) {   // ws scheme is specified\n        return url;\n    } else {\n        return null;\n    }\n}\n\nexport function getWebSocket (url, protocols, ws) {\n    const parsedUrl = isNode ? getServerUrlNode(url) : getServerUrlBrowser(url);\n\n    if (!parsedUrl) {\n        return null;\n    }\n\n    if (ws) {   // User provided webSocket class\n        return new ws(parsedUrl, protocols);\n    } else if (isNode) {    // we're in node, but no webSocket provided\n        return null;\n    } else if ('WebSocket' in window) {\n        // Chrome, MSIE, newer Firefox\n        return new window.WebSocket(parsedUrl, protocols);\n    } else if ('MozWebSocket' in window) {\n        // older versions of Firefox\n        return new window.MozWebSocket(parsedUrl, protocols);\n    }\n\n    return null;\n}\n\nexport function isBinaryTypeAllowed (type) {\n    return ALLOWED_BINARY_TYPES.indexOf(type) !== -1;\n}\n"]}