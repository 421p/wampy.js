{"version":3,"sources":["../src/wampy.js"],"names":[],"mappings":"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","file":"wampy.js","sourcesContent":["/**\n * Project: wampy.js\n *\n * https://github.com/KSDaemon/wampy.js\n *\n * A lightweight client-side implementation of\n * WAMP (The WebSocket Application Messaging Protocol v2)\n * http://wamp.ws\n *\n * Provides asynchronous RPC/PubSub over WebSocket.\n *\n * Copyright 2014 KSDaemon. Licensed under the MIT License.\n * See @license text at http://www.opensource.org/licenses/mit-license.php\n *\n */\n\nimport { WAMP_MSG_SPEC, WAMP_ERROR_MSG, isNode } from './constants';\nimport { getWebSocket, isBinaryTypeAllowed } from './utils';\nimport { JsonSerializer } from './serializers/JsonSerializer';\n\n/**\n * WAMP Client Class\n */\nclass Wampy {\n\n    /**\n     * Wampy constructor\n     * @param {string} url\n     * @param {Object} options\n     */\n    constructor (url, options) {\n\n        /**\n         * Wampy version\n         * @type {string}\n         * @private\n         */\n        this.version = 'v4.1.0';\n\n        /**\n         * WS Url\n         * @type {string}\n         * @private\n         */\n        this._url = (typeof url === 'string') ? url : null;\n\n        /**\n         * WS protocols\n         * @type {Array}\n         * @private\n         */\n        this._protocols = ['wamp.2.json'];\n\n        /**\n         * WAMP features, supported by Wampy\n         * @type {object}\n         * @private\n         */\n        this._wamp_features = {\n            agent: 'Wampy.js ' + this.version,\n            roles: {\n                publisher: {\n                    features: {\n                        subscriber_blackwhite_listing: true,\n                        publisher_exclusion: true,\n                        publisher_identification: true\n                    }\n                },\n                subscriber: {},\n                caller: {\n                    features: {\n                        caller_identification: true,\n                        progressive_call_results: true,\n                        call_canceling: true,\n                        call_timeout: true\n                    }\n                },\n                callee: {\n                    features: {\n                        caller_identification: true\n                    }\n                }\n            }\n        };\n\n        /**\n         * Internal cache for object lifetime\n         * @type {Object}\n         * @private\n         */\n        this._cache = {\n            /**\n             * WAMP Session ID\n             * @type {string}\n             */\n            sessionId: null,\n\n            /**\n             * Server WAMP roles and features\n             */\n            server_wamp_features: { roles: {} },\n\n            /**\n             * Are we in state of saying goodbye\n             * @type {boolean}\n             */\n            isSayingGoodbye: false,\n\n            /**\n             * Status of last operation\n             */\n            opStatus: { code: 0, description: 'Success!', reqId: 0 },\n\n            /**\n             * Timer for reconnection\n             * @type {null}\n             */\n            timer: null,\n\n            /**\n             * Reconnection attempts\n             * @type {number}\n             */\n            reconnectingAttempts: 0\n        };\n\n        /**\n         * WebSocket object\n         * @type {Object}\n         * @private\n         */\n        this._ws = null;\n\n        /**\n         * Internal queue for websocket requests, for case of disconnect\n         * @type {Array}\n         * @private\n         */\n        this._wsQueue = [];\n\n        /**\n         * Internal queue for wamp requests\n         * @type {object}\n         * @private\n         */\n        this._requests = {};\n\n        /**\n         * Stored RPC\n         * @type {object}\n         * @private\n         */\n        this._calls = {};\n\n        /**\n         * Stored Pub/Sub\n         * @type {object}\n         * @private\n         */\n        this._subscriptions = {};\n\n        /**\n         * Stored Pub/Sub topics\n         * @type {Array}\n         * @private\n         */\n        this._subsTopics = new Set();\n\n        /**\n         * Stored RPC Registrations\n         * @type {object}\n         * @private\n         */\n        this._rpcRegs = {};\n\n        /**\n         * Stored RPC names\n         * @type {Array}\n         * @private\n         */\n        this._rpcNames = new Set();\n\n        /**\n         * Options hash-table\n         * @type {Object}\n         * @private\n         */\n        this._options = {\n            /**\n             * Logging\n             * @type {boolean}\n             */\n            debug: false,\n\n            /**\n             * Reconnecting flag\n             * @type {boolean}\n             */\n            autoReconnect: true,\n\n            /**\n             * Reconnecting interval (in ms)\n             * @type {number}\n             */\n            reconnectInterval: 2 * 1000,\n\n            /**\n             * Maximum reconnection retries\n             * @type {number}\n             */\n            maxRetries: 25,\n\n            /**\n             * WAMP Realm to join\n             * @type {string}\n             */\n            realm: null,\n\n            /**\n             * Custom attributes to send to router on hello\n             * @type {object}\n             */\n            helloCustomDetails: null,\n\n            /**\n             * Authentication id to use in challenge\n             * @type {string}\n             */\n            authid: null,\n\n            /**\n             * Supported authentication methods\n             * @type {array}\n             */\n            authmethods: [],\n\n            /**\n             * onChallenge callback\n             * @type {function}\n             */\n            onChallenge: null,\n\n            /**\n             * onConnect callback\n             * @type {function}\n             */\n            onConnect: null,\n\n            /**\n             * onClose callback\n             * @type {function}\n             */\n            onClose: null,\n\n            /**\n             * onError callback\n             * @type {function}\n             */\n            onError: null,\n\n            /**\n             * onReconnect callback\n             * @type {function}\n             */\n            onReconnect: null,\n\n            /**\n             * onReconnectSuccess callback\n             * @type {function}\n             */\n            onReconnectSuccess: null,\n\n            /**\n             * User provided WebSocket class\n             * @type {function}\n             */\n            ws: null,\n\n            /**\n             * User provided msgpack class\n             * @type {object}\n             */\n            serializer: new JsonSerializer()\n        };\n\n        if (this._isPlainObject(options)) {\n            this._options = this._merge(this._options, options);\n        } else if (this._isPlainObject(url)) {\n            this._options = this._merge(this._options, url);\n        }\n\n        this.connect();\n    }\n\n    /* Internal utils methods */\n    /**\n     * Internal logger\n     * @private\n     */\n    _log () {\n        if (this._options.debug) {\n            console.log(arguments);\n        }\n    }\n\n    /**\n     * Get the new unique request id\n     * @returns {number}\n     * @private\n     */\n    _getReqId () {\n        let reqId;\n        const max = 2 ^ 53;\n\n        do {\n            reqId = Math.floor(Math.random() * max);\n        } while (reqId in this._requests);\n\n        return reqId;\n    }\n\n    /**\n     * Merge argument objects into one\n     * @returns {Object}\n     * @private\n     */\n    _merge () {\n        const obj = {}, l = arguments.length;\n        let i, attr;\n\n        for (i = 0; i < l; i++) {\n            for (attr in arguments[i]) {\n                obj[attr] = arguments[i][attr];\n            }\n        }\n\n        return obj;\n    }\n\n    /**\n     * Check if value is array\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isArray (obj) {\n        return (!!obj) && (Array.isArray(obj));\n    }\n\n    /**\n     * Check if value is object literal\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isPlainObject (obj) {\n        return (!!obj) && (obj.constructor === Object);\n    }\n\n    /**\n     * Fix websocket protocols based on options\n     * @private\n     */\n    _setWsProtocols () {\n        if (!(this._options.serializer instanceof JsonSerializer)) {\n            this._protocols.unshift('wamp.2.' + this._options.serializer.protocol);\n        }\n    }\n\n    /**\n     * Prerequisite checks for any wampy api call\n     * @param {string} topicURI\n     * @param {string} role\n     * @param {object} callbacks\n     * @returns {boolean}\n     * @private\n     */\n    _preReqChecks (topicURI, role, callbacks) {\n        let flag = true;\n\n        if (this._cache.sessionId && !this._cache.server_wamp_features.roles[role]) {\n            this._cache.opStatus = WAMP_ERROR_MSG['NO_' + role.toUpperCase()];\n            flag = false;\n        }\n\n        if (topicURI && !this._validateURI(topicURI)) {\n            this._cache.opStatus = WAMP_ERROR_MSG.URI_ERROR;\n            flag = false;\n        }\n\n        if (flag) {\n            return true;\n        }\n\n        if (this._isPlainObject(callbacks) && callbacks.onError) {\n            callbacks.onError(this._cache.opStatus.description);\n        }\n\n        return false;\n    }\n\n    /**\n     * Validate uri\n     * @param {string} uri\n     * @returns {boolean}\n     * @private\n     */\n    _validateURI (uri) {\n        const re = /^([0-9a-zA-Z_]{2,}\\.)*([0-9a-zA-Z_]{2,})$/;\n        return !(!re.test(uri) || uri.indexOf('wamp') === 0);\n    }\n\n    /**\n     * Encode WAMP message\n     * @param {Array} msg\n     * @returns {*}\n     * @private\n     */\n    _encode (msg) {\n        try {\n            return this._options.serializer.encode(msg);\n        } catch (e) {\n            throw new Error('[wampy] encoding exception!');\n        }\n    }\n\n    /**\n     * Decode WAMP message\n     * @param  msg\n     * @returns {array}\n     * @private\n     */\n    _decode (msg) {\n        try {\n            return this._options.serializer.decode(msg);\n        } catch (e) {\n            throw new Error('[wampy] decoding exception!');\n        }\n    }\n\n    /**\n     * Send encoded message to server\n     * @param {Array} msg\n     * @private\n     */\n    _send (msg) {\n        if (msg) {\n            this._wsQueue.push(this._encode(msg));\n        }\n\n        if (this._ws && this._ws.readyState === 1 && this._cache.sessionId) {\n            while (this._wsQueue.length) {\n                this._ws.send(this._wsQueue.shift());\n            }\n        }\n    }\n\n    /**\n     * Reset internal state and cache\n     * @private\n     */\n    _resetState () {\n        this._wsQueue = [];\n        this._subscriptions = {};\n        this._subsTopics = new Set();\n        this._requests = {};\n        this._calls = {};\n        this._rpcRegs = {};\n        this._rpcNames = new Set();\n\n        // Just keep attrs that are have to be present\n        this._cache = {\n            reconnectingAttempts: 0\n        };\n    }\n\n    /**\n     * Initialize internal websocket callbacks\n     * @private\n     */\n    _initWsCallbacks () {\n        if (this._ws) {\n            this._ws.onopen = () => {\n                this._wsOnOpen();\n            };\n            this._ws.onclose = event => {\n                this._wsOnClose(event);\n            };\n            this._ws.onmessage = event => {\n                this._wsOnMessage(event);\n            };\n            this._ws.onerror = error => {\n                this._wsOnError(error);\n            };\n        }\n    }\n\n    /**\n     * Internal websocket on open callback\n     * @private\n     */\n    _wsOnOpen () {\n        const options = this._merge(this._options.helloCustomDetails, this._wamp_features);\n\n        if (this._options.authid) {\n            options.authmethods = this._options._authmethods;\n            options.authid = this._options.authid;\n        }\n\n        this._log('[wampy] websocket connected');\n\n        const type = this._options.serializer.binaryType;\n\n        if (!isBinaryTypeAllowed(type)) {\n            throw new Error('Binary type is not allowed: ' + type);\n        }\n\n        this._ws.binatyType = type;\n\n        // WAMP SPEC: [HELLO, Realm|uri, Details|dict]\n        // Sending directly 'cause it's a hello msg and no sessionId check is needed\n        this._ws.send(this._encode([WAMP_MSG_SPEC.HELLO, this._options.realm, options]));\n    }\n\n    /**\n     * Internal websocket on close callback\n     * @param {object} event\n     * @private\n     */\n    _wsOnClose (event) {\n        const root = isNode ? global : window;\n        this._log('[wampy] websocket disconnected. Info: ', event);\n\n        // Automatic reconnection\n        if ((this._cache.sessionId || this._cache.reconnectingAttempts) &&\n            this._options.autoReconnect && this._cache.reconnectingAttempts < this._options.maxRetries && !this._cache.isSayingGoodbye) {\n            this._cache.sessionId = null;\n            this._cache.timer = root.setTimeout(\n                () => {\n                    this._wsReconnect();\n                },\n                this._options.reconnectInterval\n            );\n        } else {\n            // No reconnection needed or reached max retries count\n            if (this._options.onClose) {\n                this._options.onClose();\n            }\n\n            this._resetState();\n            this._ws = null;\n        }\n    }\n\n    /**\n     * Internal websocket on event callback\n     * @param {object} event\n     * @private\n     */\n    _wsOnMessage (event) {\n        let data, id, i, msg, p;\n\n        this._log('[wampy] websocket message received', event.data);\n\n        data = this._decode(event.data);\n\n        switch (data[0]) {\n            case WAMP_MSG_SPEC.WELCOME:\n                // WAMP SPEC: [WELCOME, Session|id, Details|dict]\n\n                this._cache.sessionId = data[1];\n                this._cache.server_wamp_features = data[2];\n\n                if (this._cache.reconnectingAttempts) {\n                    // There was reconnection\n\n                    this._cache.reconnectingAttempts = 0;\n\n                    if (this._options.onReconnectSuccess) {\n                        this._options.onReconnectSuccess();\n                    }\n\n                    // Let's renew all previous state\n                    this._renewSubscriptions();\n                    this._renewRegistrations();\n\n                } else {\n                    // Firing onConnect event on real connection to WAMP server\n                    if (this._options.onConnect) {\n                        this._options.onConnect();\n                    }\n                }\n\n                // Send local queue if there is something out there\n                this._send();\n\n                break;\n            case WAMP_MSG_SPEC.ABORT:\n                // WAMP SPEC: [ABORT, Details|dict, Reason|uri]\n                if (this._options.onError) {\n                    this._options.onError(data[1].message ? data[1].message : data[2]);\n                }\n                this._ws.close();\n                break;\n            case WAMP_MSG_SPEC.CHALLENGE:\n                // WAMP SPEC: [CHALLENGE, AuthMethod|string, Extra|dict]\n\n                if (this._options.authid && typeof this._options.onChallenge === 'function') {\n\n                    p = new Promise((resolve, reject) => {\n                        resolve(this._options.onChallenge(data[1], data[2]));\n                    });\n\n                    p.then((key) => {\n\n                        // Sending directly 'cause it's a challenge msg and no sessionId check is needed\n                        this._ws.send(this._encode([WAMP_MSG_SPEC.AUTHENTICATE, key, {}]));\n\n                    }).catch(e => {\n                        this._ws.send(this._encode([\n                            WAMP_MSG_SPEC.ABORT,\n                            { message: 'Exception in onChallenge handler raised!' },\n                            'wamp.error.cannot_authenticate'\n                        ]));\n                        if (this._options.onError) {\n                            this._options.onError(WAMP_ERROR_MSG.CRA_EXCEPTION.description);\n                        }\n                        this._ws.close();\n                        this._cache.opStatus = WAMP_ERROR_MSG.CRA_EXCEPTION;\n                    });\n\n                } else {\n\n                    this._ws.send(this._encode([\n                        WAMP_MSG_SPEC.ABORT,\n                        { message: WAMP_ERROR_MSG.NO_CRA_CB_OR_ID.description },\n                        'wamp.error.cannot_authenticate'\n                    ]));\n                    if (this._options.onError) {\n                        this._options.onError(WAMP_ERROR_MSG.NO_CRA_CB_OR_ID.description);\n                    }\n                    this._ws.close();\n                    this._cache.opStatus = WAMP_ERROR_MSG.NO_CRA_CB_OR_ID;\n\n                }\n                break;\n            case WAMP_MSG_SPEC.GOODBYE:\n                // WAMP SPEC: [GOODBYE, Details|dict, Reason|uri]\n                if (!this._cache.isSayingGoodbye) {    // get goodbye, initiated by server\n                    this._cache.isSayingGoodbye = true;\n                    this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.error.goodbye_and_out']);\n                }\n                this._cache.sessionId = null;\n                this._ws.close();\n                break;\n            case WAMP_MSG_SPEC.ERROR:\n                // WAMP SPEC: [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict,\n                //             Error|uri, (Arguments|list, ArgumentsKw|dict)]\n                switch (data[1]) {\n                    case WAMP_MSG_SPEC.SUBSCRIBE:\n                    case WAMP_MSG_SPEC.UNSUBSCRIBE:\n                    case WAMP_MSG_SPEC.PUBLISH:\n                    case WAMP_MSG_SPEC.REGISTER:\n                    case WAMP_MSG_SPEC.UNREGISTER:\n\n                        this._requests[data[2]] && this._requests[data[2]].callbacks.onError &&\n                        this._requests[data[2]].callbacks.onError(data[4], data[3], data[5], data[6]);\n                        delete this._requests[data[2]];\n\n                        break;\n                    case WAMP_MSG_SPEC.INVOCATION:\n                        break;\n                    case WAMP_MSG_SPEC.CALL:\n\n                        // WAMP SPEC: [ERROR, CALL, CALL.Request|id, Details|dict,\n                        //             Error|uri, Arguments|list, ArgumentsKw|dict]\n                        this._calls[data[2]] && this._calls[data[2]].onError &&\n                        this._calls[data[2]].onError(data[4], data[3], data[5], data[6]);\n                        delete this._calls[data[2]];\n\n                        break;\n                    default:\n                        this._log('[wampy] Received non-compliant WAMP ERROR message');\n                        break;\n                }\n                break;\n            case WAMP_MSG_SPEC.SUBSCRIBED:\n                // WAMP SPEC: [SUBSCRIBED, SUBSCRIBE.Request|id, Subscription|id]\n                if (this._requests[data[1]]) {\n                    this._subscriptions[this._requests[data[1]].topic] = this._subscriptions[data[2]] = {\n                        id: data[2],\n                        callbacks: [this._requests[data[1]].callbacks.onEvent]\n                    };\n\n                    this._subsTopics.add(this._requests[data[1]].topic);\n\n                    if (this._requests[data[1]].callbacks.onSuccess) {\n                        this._requests[data[1]].callbacks.onSuccess();\n                    }\n\n                    delete this._requests[data[1]];\n\n                }\n                break;\n            case WAMP_MSG_SPEC.UNSUBSCRIBED:\n                // WAMP SPEC: [UNSUBSCRIBED, UNSUBSCRIBE.Request|id]\n                if (this._requests[data[1]]) {\n                    id = this._subscriptions[this._requests[data[1]].topic].id;\n                    delete this._subscriptions[this._requests[data[1]].topic];\n                    delete this._subscriptions[id];\n\n                    if (this._subsTopics.has(this._requests[data[1]].topic)) {\n                        this._subsTopics.delete(this._requests[data[1]].topic);\n                    }\n\n                    if (this._requests[data[1]].callbacks.onSuccess) {\n                        this._requests[data[1]].callbacks.onSuccess();\n                    }\n\n                    delete this._requests[data[1]];\n                }\n                break;\n            case WAMP_MSG_SPEC.PUBLISHED:\n                // WAMP SPEC: [PUBLISHED, PUBLISH.Request|id, Publication|id]\n                if (this._requests[data[1]]) {\n                    if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                        this._requests[data[1]].callbacks.onSuccess();\n                    }\n\n                    delete this._requests[data[1]];\n\n                }\n                break;\n            case WAMP_MSG_SPEC.EVENT:\n                if (this._subscriptions[data[1]]) {\n\n                    // WAMP SPEC: [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id,\n                    //             Details|dict, PUBLISH.Arguments|list, PUBLISH.ArgumentKw|dict]\n\n                    i = this._subscriptions[data[1]].callbacks.length;\n                    while (i--) {\n                        this._subscriptions[data[1]].callbacks[i](data[4], data[5]);\n                    }\n\n                }\n                break;\n            case WAMP_MSG_SPEC.RESULT:\n                if (this._calls[data[1]]) {\n\n                    // WAMP SPEC: [RESULT, CALL.Request|id, Details|dict,\n                    //             YIELD.Arguments|list, YIELD.ArgumentsKw|dict]\n\n                    this._calls[data[1]].onSuccess(data[3], data[4]);\n                    if (!(data[2].progress && data[2].progress === true)) {\n                        // We receive final result (progressive or not)\n                        delete this._calls[data[1]];\n                    }\n\n                }\n                break;\n            // case WAMP_MSG_SPEC.REGISTER:\n            //     // WAMP SPEC:\n            //     break;\n            case WAMP_MSG_SPEC.REGISTERED:\n                // WAMP SPEC: [REGISTERED, REGISTER.Request|id, Registration|id]\n                if (this._requests[data[1]]) {\n                    this._rpcRegs[this._requests[data[1]].topic] = this._rpcRegs[data[2]] = {\n                        id: data[2],\n                        callbacks: [this._requests[data[1]].callbacks.rpc]\n                    };\n\n                    this._rpcNames.add(this._requests[data[1]].topic);\n\n                    if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                        this._requests[data[1]].callbacks.onSuccess();\n                    }\n\n                    delete this._requests[data[1]];\n\n                }\n                break;\n            // case WAMP_MSG_SPEC.UNREGISTER:\n            //     // WAMP SPEC:\n            //     break;\n            case WAMP_MSG_SPEC.UNREGISTERED:\n                // WAMP SPEC: [UNREGISTERED, UNREGISTER.Request|id]\n                if (this._requests[data[1]]) {\n                    id = this._rpcRegs[this._requests[data[1]].topic].id;\n                    delete this._rpcRegs[this._requests[data[1]].topic];\n                    delete this._rpcRegs[id];\n\n                    if (this._rpcNames.has(this._requests[data[1]].topic)) {\n                        this._rpcNames.delete(this._requests[data[1]].topic);\n                    }\n\n                    if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                        this._requests[data[1]].callbacks.onSuccess();\n                    }\n\n                    delete this._requests[data[1]];\n                }\n                break;\n            case WAMP_MSG_SPEC.INVOCATION:\n                if (this._rpcRegs[data[2]]) {\n\n                    // WAMP SPEC: [INVOCATION, Request|id, REGISTERED.Registration|id,\n                    //             Details|dict, CALL.Arguments|list, CALL.ArgumentsKw|dict]\n\n                    p = new Promise((resolve, reject) => {\n                        resolve(this._rpcRegs[data[2]].callbacks[0](data[4], data[5], data[3]));\n                    });\n\n                    p.then((results) => {\n                        // WAMP SPEC: [YIELD, INVOCATION.Request|id, Options|dict, (Arguments|list, ArgumentsKw|dict)]\n                        msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n                        if (this._isArray(results)) {\n                            // Options\n                            if (this._isPlainObject(results[0])) {\n                                msg[2] = results[0];\n                            }\n\n                            if (this._isArray(results[1])) {\n                                msg.push(results[1]);\n                            } else if (typeof (results[1]) !== 'undefined') {\n                                msg.push([results[1]]);\n                            }\n\n                            if (this._isPlainObject(results[2])) {\n                                if (msg.length === 3) {\n                                    msg.push([]);\n                                }\n                                msg.push(results[2]);\n                            }\n                        } else {\n                            msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n                        }\n                        this._send(msg);\n\n                    }).catch(e => {\n                        let msg = [WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                            data[1], e.details || {}, e.uri || 'wamp.error.invocation_exception'];\n\n                        if (e.argsList && this._isArray(e.argsList)) {\n                            msg.push(e.argsList);\n                        }\n\n                        if (e.argsDict && this._isPlainObject(e.argsDict)) {\n                            if (msg.length === 5) {\n                                msg.push([]);\n                            }\n                            msg.push(e.argsDict);\n                        }\n                        this._send(msg);\n                    });\n\n                } else {\n                    // WAMP SPEC: [ERROR, INVOCATION, INVOCATION.Request|id, Details|dict, Error|uri]\n                    this._send([WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                        data[1], {}, 'wamp.error.no_such_procedure']);\n                    this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_INVOCATION;\n                }\n\n                break;\n            // case WAMP_MSG_SPEC.INTERRUPT:\n            //     // WAMP SPEC:\n            //     break;\n            // case WAMP_MSG_SPEC.YIELD:\n            //     // WAMP SPEC:\n            //     break;\n            default:\n                this._log('[wampy] Received non-compliant WAMP message');\n                break;\n        }\n    }\n\n    /**\n     * Internal websocket on error callback\n     * @param {object} error\n     * @private\n     */\n    _wsOnError (error) {\n        this._log('[wampy] websocket error');\n\n        if (this._options.onError) {\n            this._options.onError(error);\n        }\n    }\n\n    /**\n     * Reconnect to server in case of websocket error\n     * @private\n     */\n    _wsReconnect () {\n        this._log('[wampy] websocket reconnecting...');\n\n        if (this._options.onReconnect) {\n            this._options.onReconnect();\n        }\n\n        this._cache.reconnectingAttempts++;\n        this._ws = getWebSocket(this._url, this._protocols, this._options.ws);\n        this._initWsCallbacks();\n    }\n\n    /**\n     * Resubscribe to topics in case of communication error\n     * @private\n     */\n    _renewSubscriptions () {\n        let i;\n        const subs = this._subscriptions,\n            st = this._subsTopics;\n\n        this._subscriptions = {};\n        this._subsTopics = new Set();\n\n        for (let topic of st) {\n            i = subs[topic].callbacks.length;\n            while (i--) {\n                this.subscribe(topic, subs[topic].callbacks[i]);\n            }\n        }\n    }\n\n    /**\n     * Reregister RPCs in case of communication error\n     * @private\n     */\n    _renewRegistrations () {\n        const rpcs = this._rpcRegs,\n            rn = this._rpcNames;\n\n        this._rpcRegs = {};\n        this._rpcNames = new Set();\n\n        for (let rpcName of rn) {\n            this.register(rpcName, { rpc: rpcs[rpcName].callbacks[0] });\n        }\n    }\n\n    /* Wampy public API */\n\n    /**\n     * Get or set Wampy options\n     *\n     * To get options - call without parameters\n     * To set options - pass hash-table with options values\n     *\n     * @param {object} opts\n     * @returns {*}\n     */\n    options (opts) {\n        if (typeof (opts) === 'undefined') {\n            return this._options;\n        } else if (this._isPlainObject(opts)) {\n            this._options = this._merge(this._options, opts);\n            return this;\n        }\n    }\n\n    /**\n     * Get the status of last operation\n     *\n     * @returns {object} with 2 fields: code, description\n     *      code: 0 - if operation was successful\n     *      code > 0 - if error occurred\n     *      description contains details about error\n     *      reqId: last send request ID\n     */\n    getOpStatus () {\n        return this._cache.opStatus;\n    }\n\n    /**\n     * Get the WAMP Session ID\n     *\n     * @returns {string} Session ID\n     */\n    getSessionId () {\n        return this._cache.sessionId;\n    }\n\n    /**\n     * Connect to server\n     * @param {string} url New url (optional)\n     * @returns {Wampy}\n     */\n    connect (url) {\n        if (url) {\n            this._url = url;\n        }\n\n        if (this._options.realm) {\n\n            const authp = (this._options.authid ? 1 : 0) +\n                ((this._isArray(this._options.authmethods) && this._options.authmethods.length) ? 1 : 0) +\n                (typeof this._options.onChallenge === 'function' ? 1 : 0);\n\n            if (authp > 0 && authp < 3) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_CRA_CB_OR_ID;\n                return this;\n            }\n\n            this._setWsProtocols();\n            this._ws = getWebSocket(this._url, this._protocols, this._options.ws);\n            if (!this._ws) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_WS_OR_URL;\n                return this;\n            }\n            this._initWsCallbacks();\n\n        } else {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_REALM;\n        }\n\n        return this;\n    }\n\n    /**\n     * Disconnect from server\n     * @returns {Wampy}\n     */\n    disconnect () {\n        if (this._cache.sessionId) {\n            // need to send goodbye message to server\n            this._cache.isSayingGoodbye = true;\n            this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.error.system_shutdown']);\n        } else if (this._ws) {\n            this._ws.close();\n        }\n\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n\n        return this;\n    }\n\n    /**\n     * Abort WAMP session establishment\n     *\n     * @returns {Wampy}\n     */\n    abort () {\n\n        if (!this._cache.sessionId && this._ws.readyState === 1) {\n            this._send([WAMP_MSG_SPEC.ABORT, {}, 'wamp.error.abort']);\n            this._cache.sessionId = null;\n        }\n\n        this._ws.close();\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n\n        return this;\n    }\n\n    /**\n     * Subscribe to a topic on a broker\n     *\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function - it will be treated as published event callback\n     *                          or it can be hash table of callbacks:\n     *                          { onSuccess: will be called when subscribe would be confirmed\n         *                            onError: will be called if subscribe would be aborted\n         *                            onEvent: will be called on receiving published event }\n     *\n     * @returns {Wampy}\n     */\n    subscribe (topicURI, callbacks) {\n        let reqId;\n\n        if (!this._preReqChecks(topicURI, 'broker', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { onEvent: callbacks };\n        } else if (!this._isPlainObject(callbacks) || typeof (callbacks.onEvent) === 'undefined') {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError(this._cache.opStatus.description);\n            }\n\n            return this;\n        }\n\n        if (!this._subscriptions[topicURI] || !this._subscriptions[topicURI].callbacks.length) {\n            // no such subscription or processing unsubscribing\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks: callbacks\n            };\n\n            // WAMP SPEC: [SUBSCRIBE, Request|id, Options|dict, Topic|uri]\n            this._send([WAMP_MSG_SPEC.SUBSCRIBE, reqId, {}, topicURI]);\n\n        } else {    // already have subscription to this topic\n            // There is no such callback yet\n            if (this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent) < 0) {\n                this._subscriptions[topicURI].callbacks.push(callbacks.onEvent);\n            }\n\n            if (callbacks.onSuccess) {\n                callbacks.onSuccess();\n            }\n        }\n\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * Unsubscribe from topic\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function - it will be treated as\n     *                          published event callback to remove or it can be hash table of callbacks:\n     *                          { onSuccess: will be called when unsubscribe would be confirmed\n         *                            onError: will be called if unsubscribe would be aborted\n         *                            onEvent: published event callback to remove }\n     * @returns {Wampy}\n     */\n    unsubscribe (topicURI, callbacks) {\n        let reqId, i = -1;\n\n        if (!this._preReqChecks(null, 'broker', callbacks)) {\n            return this;\n        }\n\n        if (this._subscriptions[topicURI]) {\n\n            reqId = this._getReqId();\n\n            if (typeof (callbacks) === 'undefined') {\n                this._subscriptions[topicURI].callbacks = [];\n                callbacks = {};\n            } else if (typeof callbacks === 'function') {\n                i = this._subscriptions[topicURI].callbacks.indexOf(callbacks);\n                callbacks = {};\n            } else if (callbacks.onEvent && typeof callbacks.onEvent === 'function') {\n                i = this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent);\n            } else {\n                this._subscriptions[topicURI].callbacks = [];\n            }\n\n            if (i >= 0) {\n                this._subscriptions[topicURI].callbacks.splice(i, 1);\n            }\n\n            if (this._subscriptions[topicURI].callbacks.length) {\n                // There are another callbacks for this topic\n                this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n                return this;\n            }\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks: callbacks\n            };\n\n            // WAMP_SPEC: [UNSUBSCRIBE, Request|id, SUBSCRIBED.Subscription|id]\n            this._send([WAMP_MSG_SPEC.UNSUBSCRIBE, reqId, this._subscriptions[topicURI].id]);\n\n        } else {\n            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_UNSUBSCRIBE;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError(this._cache.opStatus.description);\n            }\n\n            return this;\n        }\n\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * Publish a event to topic\n     * @param {string} topicURI\n     * @param {string|number|Array|object} payload - optional parameter.\n     * @param {object} callbacks - optional hash table of callbacks:\n     *                          { onSuccess: will be called when publishing would be confirmed\n         *                            onError: will be called if publishing would be aborted }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { exclude: integer|array WAMP session id(s) that won't receive a published event,\n         *                                      even though they may be subscribed\n         *                            exclude_authid: string|array Authentication id(s) that won't receive\n         *                                      a published event, even though they may be subscribed\n         *                            exclude_authrole: string|array Authentication role(s) that won't receive\n         *                                      a published event, even though they may be subscribed\n         *                            eligible: integer|array WAMP session id(s) that are allowed\n         *                                      to receive a published event\n         *                            eligible_authid: string|array Authentication id(s) that are allowed\n         *                                      to receive a published event\n         *                            eligible_authrole: string|array Authentication role(s) that are allowed\n         *                                      to receive a published event\n         *                            exclude_me: bool flag of receiving publishing event by initiator\n         *                            disclose_me: bool flag of disclosure of publisher identity (its WAMP session ID)\n         *                                      to receivers of a published event }\n     * @returns {Wampy}\n     */\n    publish (topicURI, payload, callbacks, advancedOptions) {\n        let reqId, msg, err = false;\n        const options = {};\n\n        if (!this._preReqChecks(topicURI, 'broker', callbacks)) {\n            return this;\n        }\n\n        if (this._isPlainObject(callbacks)) {\n            options.acknowledge = true;\n        }\n\n        if (typeof (advancedOptions) !== 'undefined') {\n\n            if (this._isPlainObject(advancedOptions)) {\n                if (advancedOptions.exclude) {\n                    if (this._isArray(advancedOptions.exclude) && advancedOptions.exclude.length) {\n                        options.exclude = advancedOptions.exclude;\n                    } else if (typeof advancedOptions.exclude === 'number') {\n                        options.exclude = [advancedOptions.exclude];\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.exclude_authid) {\n                    if (this._isArray(advancedOptions.exclude_authid) && advancedOptions.exclude_authid.length) {\n                        options.exclude_authid = advancedOptions.exclude_authid;\n                    } else if (typeof advancedOptions.exclude_authid === 'string') {\n                        options.exclude_authid = [advancedOptions.exclude_authid];\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.exclude_authrole) {\n                    if (this._isArray(advancedOptions.exclude_authrole) && advancedOptions.exclude_authrole.length) {\n                        options.exclude_authrole = advancedOptions.exclude_authrole;\n                    } else if (typeof advancedOptions.exclude_authrole === 'string') {\n                        options.exclude_authrole = [advancedOptions.exclude_authrole];\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.eligible) {\n                    if (this._isArray(advancedOptions.eligible) && advancedOptions.eligible.length) {\n                        options.eligible = advancedOptions.eligible;\n                    } else if (typeof advancedOptions.eligible === 'number') {\n                        options.eligible = [advancedOptions.eligible];\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.eligible_authid) {\n                    if (this._isArray(advancedOptions.eligible_authid) && advancedOptions.eligible_authid.length) {\n                        options.eligible_authid = advancedOptions.eligible_authid;\n                    } else if (typeof advancedOptions.eligible_authid === 'string') {\n                        options.eligible_authid = [advancedOptions.eligible_authid];\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.eligible_authrole) {\n                    if (this._isArray(advancedOptions.eligible_authrole) && advancedOptions.eligible_authrole.length) {\n                        options.eligible_authrole = advancedOptions.eligible_authrole;\n                    } else if (typeof advancedOptions.eligible_authrole === 'string') {\n                        options.eligible_authrole = [advancedOptions.eligible_authrole];\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.hasOwnProperty('exclude_me')) {\n                    options.exclude_me = advancedOptions.exclude_me !== false;\n                }\n\n                if (advancedOptions.hasOwnProperty('disclose_me')) {\n                    options.disclose_me = advancedOptions.disclose_me === true;\n                }\n\n            } else {\n                err = true;\n            }\n\n            if (err) {\n                this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n        }\n\n        reqId = this._getReqId();\n\n        switch (arguments.length) {\n            case 1:\n                // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri]\n                msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI];\n                break;\n            case 2:\n                // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list (, ArgumentsKw|dict)]\n                if (this._isArray(payload)) {\n                    msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, payload];\n                } else if (this._isPlainObject(payload)) {\n                    msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, [], payload];\n                } else {    // assume it's a single value\n                    msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, [payload]];\n                }\n                break;\n            default:\n                this._requests[reqId] = {\n                    topic: topicURI,\n                    callbacks: callbacks\n                };\n\n                // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list (, ArgumentsKw|dict)]\n                if (this._isArray(payload)) {\n                    msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, payload];\n                } else if (this._isPlainObject(payload)) {\n                    msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, [], payload];\n                } else {    // assume it's a single value\n                    msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI, [payload]];\n                }\n                break;\n        }\n\n        this._send(msg);\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * Remote Procedure Call\n     * @param {string} topicURI\n     * @param {string|number|Array|object} payload - can be either a value of any type or null\n     * @param {function|object} callbacks - if it is a function - it will be treated as result callback function\n     *                          or it can be hash table of callbacks:\n     *                          { onSuccess: will be called with result on successful call\n         *                            onError: will be called if invocation would be aborted }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { disclose_me: bool flag of disclosure of Caller identity (WAMP session ID)\n         *                                  to endpoints of a routed call\n         *                            receive_progress: bool flag for receiving progressive results. In this case\n         *                                  onSuccess function will be called every time on receiving result\n         *                            timeout: integer timeout (in ms) for the call to finish }\n     * @returns {Wampy}\n     */\n    call (topicURI, payload, callbacks, advancedOptions) {\n        let reqId, msg, err = false;\n        const options = {};\n\n        if (!this._preReqChecks(topicURI, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { onSuccess: callbacks };\n        } else if (!this._isPlainObject(callbacks) || typeof (callbacks.onSuccess) === 'undefined') {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError(this._cache.opStatus.description);\n            }\n\n            return this;\n        }\n\n        if (typeof (advancedOptions) !== 'undefined') {\n\n            if (this._isPlainObject(advancedOptions)) {\n                if (advancedOptions.hasOwnProperty('disclose_me')) {\n                    options.disclose_me = advancedOptions.disclose_me === true;\n                }\n\n                if (advancedOptions.hasOwnProperty('receive_progress')) {\n                    options.receive_progress = advancedOptions.receive_progress === true;\n                }\n\n                if (advancedOptions.hasOwnProperty('timeout')) {\n                    if (typeof advancedOptions.timeout === 'number') {\n                        options.timeout = advancedOptions.timeout;\n                    } else {\n                        err = true;\n                    }\n                }\n\n            } else {\n                err = true;\n            }\n\n            if (err) {\n                this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError(this._cache.opStatus.description);\n                }\n\n                return this;\n            }\n        }\n\n        do {\n            reqId = this._getReqId();\n        } while (reqId in this._calls);\n\n        this._calls[reqId] = callbacks;\n\n        // WAMP SPEC: [CALL, Request|id, Options|dict, Procedure|uri, (Arguments|list, ArgumentsKw|dict)]\n        if (payload === null) {\n            msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI];\n        } else {\n            if (this._isArray(payload)) {\n                msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI, payload];\n            } else if (this._isPlainObject(payload)) {\n                msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI, [], payload];\n            } else {    // assume it's a single value\n                msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI, [payload]];\n            }\n        }\n\n        this._send(msg);\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * RPC invocation cancelling\n     *\n     * @param {int} reqId RPC call request ID\n     * @param {function|object} callbacks - if it is a function - it will be called if successfully\n     *                          sent canceling message or it can be hash table of callbacks:\n     *                          { onSuccess: will be called if successfully sent canceling message\n         *                            onError: will be called if some error occurred }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { mode: string|one of the possible modes:\n         *                                  \"skip\" | \"kill\" | \"killnowait\". Skip is default.\n          *                          }\n     *\n     * @returns {Wampy}\n     */\n    cancel (reqId, callbacks, advancedOptions) {\n        const options = { mode: 'skip' };\n\n        if (!this._preReqChecks(null, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (!reqId || !this._calls[reqId]) {\n            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_REQ_ID;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError(this._cache.opStatus.description);\n            }\n\n            return this;\n        }\n\n        if ((typeof (advancedOptions) !== 'undefined') &&\n            (this._isPlainObject(advancedOptions)) &&\n            (advancedOptions.hasOwnProperty('mode'))) {\n\n            options.mode = /skip|kill|killnowait/.test(advancedOptions.mode) ? advancedOptions.mode : 'skip';\n        }\n\n        // WAMP SPEC: [CANCEL, CALL.Request|id, Options|dict]\n        this._send([WAMP_MSG_SPEC.CANCEL, reqId, options]);\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n\n        callbacks.onSuccess && callbacks.onSuccess();\n\n        return this;\n    }\n\n    /**\n     * RPC registration for invocation\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function - it will be treated as rpc itself\n     *                          or it can be hash table of callbacks:\n     *                          { rpc: registered procedure\n         *                            onSuccess: will be called on successful registration\n         *                            onError: will be called if registration would be aborted }\n     * @returns {Wampy}\n     */\n    register (topicURI, callbacks) {\n        let reqId;\n\n        if (!this._preReqChecks(topicURI, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { rpc: callbacks };\n        } else if (!this._isPlainObject(callbacks) || typeof (callbacks.rpc) === 'undefined') {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError(this._cache.opStatus.description);\n            }\n\n            return this;\n        }\n\n        if (!this._rpcRegs[topicURI] || !this._rpcRegs[topicURI].callbacks.length) {\n            // no such registration or processing unregistering\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks: callbacks\n            };\n\n            // WAMP SPEC: [REGISTER, Request|id, Options|dict, Procedure|uri]\n            this._send([WAMP_MSG_SPEC.REGISTER, reqId, {}, topicURI]);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n        } else {    // already have registration with such topicURI\n            this._cache.opStatus = WAMP_ERROR_MSG.RPC_ALREADY_REGISTERED;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError(this._cache.opStatus.description);\n            }\n\n        }\n\n        return this;\n\n    }\n\n    /**\n     * RPC unregistration for invocation\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function, it will be called on successful unregistration\n     *                          or it can be hash table of callbacks:\n     *                          { onSuccess: will be called on successful unregistration\n         *                            onError: will be called if unregistration would be aborted }\n     * @returns {Wampy}\n     */\n    unregister (topicURI, callbacks) {\n        let reqId;\n\n        if (!this._preReqChecks(topicURI, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { onSuccess: callbacks };\n        }\n\n        if (this._rpcRegs[topicURI]) {   // there is such registration\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks: callbacks\n            };\n\n            // WAMP SPEC: [UNREGISTER, Request|id, REGISTERED.Registration|id]\n            this._send([WAMP_MSG_SPEC.UNREGISTER, reqId, this._rpcRegs[topicURI].id]);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n        } else {    // there is no registration with such topicURI\n            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_UNREG;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError(this._cache.opStatus.description);\n            }\n\n        }\n\n        return this;\n    }\n}\n\nexport default Wampy;\nexport { Wampy };\n"]}