{"version":3,"sources":["../src/wampy.js"],"names":["Wampy","url","options","version","_url","_protocols","_wamp_features","agent","roles","publisher","features","subscriber_blackwhite_listing","publisher_exclusion","publisher_identification","subscriber","caller","caller_identification","progressive_call_results","call_canceling","call_timeout","callee","_cache","sessionId","reqId","server_wamp_features","isSayingGoodbye","opStatus","code","description","timer","reconnectingAttempts","_ws","_wsQueue","_requests","_calls","_subscriptions","_subsTopics","Set","_rpcRegs","_rpcNames","_options","debug","autoReconnect","reconnectInterval","maxRetries","realm","helloCustomDetails","authid","authmethods","onChallenge","onConnect","onClose","onError","onReconnect","onReconnectSuccess","ws","serializer","_isPlainObject","_merge","connect","console","log","arguments","obj","l","length","i","attr","Array","isArray","constructor","Object","unshift","protocol","topicURI","role","callbacks","flag","toUpperCase","_validateURI","URI_ERROR","error","uri","re","test","indexOf","msg","encode","e","Error","decode","push","_encode","readyState","send","shift","onopen","_wsOnOpen","onclose","_wsOnClose","event","onmessage","_wsOnMessage","onerror","_wsOnError","serverProtocol","split","_log","NO_SERIALIZER_AVAILABLE","type","binaryType","INVALID_SERIALIZER_TYPE","binatyType","HELLO","setTimeout","_wsReconnect","_resetState","data","_decode","then","id","p","WELCOME","_renewSubscriptions","_renewRegistrations","_send","ABORT","details","close","CHALLENGE","Promise","resolve","reject","key","AUTHENTICATE","catch","message","CRA_EXCEPTION","NO_CRA_CB_OR_ID","GOODBYE","ERROR","SUBSCRIBE","UNSUBSCRIBE","PUBLISH","REGISTER","UNREGISTER","argsList","argsDict","INVOCATION","CALL","SUBSCRIBED","topic","onEvent","add","onSuccess","UNSUBSCRIBED","has","delete","PUBLISHED","EVENT","RESULT","progress","REGISTERED","rpc","UNREGISTERED","results","YIELD","_isArray","NON_EXIST_RPC_INVOCATION","err","_initWsCallbacks","subs","st","subscribe","rpcs","rn","rpcName","register","opts","authp","_setWsProtocols","NO_WS_OR_URL","NO_REALM","SUCCESS","_preReqChecks","NO_CALLBACK_SPEC","_getReqId","splice","NON_EXIST_UNSUBSCRIBE","payload","advancedOptions","hasPayload","acknowledge","exclude","exclude_authid","exclude_authrole","eligible","eligible_authid","eligible_authrole","hasOwnProperty","exclude_me","disclose_me","INVALID_PARAM","receive_progress","timeout","mode","NON_EXIST_RPC_REQ_ID","CANCEL","RPC_ALREADY_REGISTERED","NON_EXIST_RPC_UNREG"],"mappings":"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","file":"wampy.js","sourcesContent":["/**\n * Project: wampy.js\n *\n * https://github.com/KSDaemon/wampy.js\n *\n * A lightweight client-side implementation of\n * WAMP (The WebSocket Application Messaging Protocol v2)\n * http://wamp.ws\n *\n * Provides asynchronous RPC/PubSub over WebSocket.\n *\n * Copyright 2014 KSDaemon. Licensed under the MIT License.\n * See @license text at http://www.opensource.org/licenses/mit-license.php\n *\n */\n\nimport {WAMP_ERROR_MSG, WAMP_MSG_SPEC} from './constants';\nimport {getWebSocket, isBinaryTypeAllowed} from './utils';\nimport {JsonSerializer} from './serializers/JsonSerializer';\n\n/**\n * WAMP Client Class\n */\nclass Wampy {\n\n    /**\n     * Wampy constructor\n     * @param {string} [url]\n     * @param {Object} [options]\n     */\n    constructor (url, options) {\n\n        /**\n         * Wampy version\n         * @type {string}\n         * @private\n         */\n        this.version = 'v6.0.0';\n\n        /**\n         * WS Url\n         * @type {string}\n         * @private\n         */\n        this._url = (typeof url === 'string') ? url : null;\n\n        /**\n         * WS protocols\n         * @type {Array}\n         * @private\n         */\n        this._protocols = ['wamp.2.json'];\n\n        /**\n         * WAMP features, supported by Wampy\n         * @type {object}\n         * @private\n         */\n        this._wamp_features = {\n            agent: 'Wampy.js ' + this.version,\n            roles: {\n                publisher: {\n                    features: {\n                        subscriber_blackwhite_listing: true,\n                        publisher_exclusion: true,\n                        publisher_identification: true\n                    }\n                },\n                subscriber: {},\n                caller: {\n                    features: {\n                        caller_identification: true,\n                        progressive_call_results: true,\n                        call_canceling: true,\n                        call_timeout: true\n                    }\n                },\n                callee: {\n                    features: {\n                        caller_identification: true\n                    }\n                }\n            }\n        };\n\n        /**\n         * Internal cache for object lifetime\n         * @type {Object}\n         * @private\n         */\n        this._cache = {\n            /**\n             * WAMP Session ID\n             * @type {string}\n             */\n            sessionId: null,\n\n            /**\n             * WAMP Session scope requests ID\n             * @type {int}\n             */\n            reqId: 0,\n\n            /**\n             * Server WAMP roles and features\n             */\n            server_wamp_features: { roles: {} },\n\n            /**\n             * Are we in state of saying goodbye\n             * @type {boolean}\n             */\n            isSayingGoodbye: false,\n\n            /**\n             * Status of last operation\n             */\n            opStatus: { code: 0, description: 'Success!', reqId: 0 },\n\n            /**\n             * Timer for reconnection\n             * @type {null}\n             */\n            timer: null,\n\n            /**\n             * Reconnection attempts\n             * @type {number}\n             */\n            reconnectingAttempts: 0\n        };\n\n        /**\n         * WebSocket object\n         * @type {Object}\n         * @private\n         */\n        this._ws = null;\n\n        /**\n         * Internal queue for websocket requests, for case of disconnect\n         * @type {Array}\n         * @private\n         */\n        this._wsQueue = [];\n\n        /**\n         * Internal queue for wamp requests\n         * @type {object}\n         * @private\n         */\n        this._requests = {};\n\n        /**\n         * Stored RPC\n         * @type {object}\n         * @private\n         */\n        this._calls = {};\n\n        /**\n         * Stored Pub/Sub\n         * @type {object}\n         * @private\n         */\n        this._subscriptions = {};\n\n        /**\n         * Stored Pub/Sub topics\n         * @type {Array}\n         * @private\n         */\n        this._subsTopics = new Set();\n\n        /**\n         * Stored RPC Registrations\n         * @type {object}\n         * @private\n         */\n        this._rpcRegs = {};\n\n        /**\n         * Stored RPC names\n         * @type {Array}\n         * @private\n         */\n        this._rpcNames = new Set();\n\n        /**\n         * Options hash-table\n         * @type {Object}\n         * @private\n         */\n        this._options = {\n            /**\n             * Logging\n             * @type {boolean}\n             */\n            debug: false,\n\n            /**\n             * Reconnecting flag\n             * @type {boolean}\n             */\n            autoReconnect: true,\n\n            /**\n             * Reconnecting interval (in ms)\n             * @type {number}\n             */\n            reconnectInterval: 2 * 1000,\n\n            /**\n             * Maximum reconnection retries\n             * @type {number}\n             */\n            maxRetries: 25,\n\n            /**\n             * WAMP Realm to join\n             * @type {string}\n             */\n            realm: null,\n\n            /**\n             * Custom attributes to send to router on hello\n             * @type {object}\n             */\n            helloCustomDetails: null,\n\n            /**\n             * Authentication id to use in challenge\n             * @type {string}\n             */\n            authid: null,\n\n            /**\n             * Supported authentication methods\n             * @type {array}\n             */\n            authmethods: [],\n\n            /**\n             * onChallenge callback\n             * @type {function}\n             */\n            onChallenge: null,\n\n            /**\n             * onConnect callback\n             * @type {function}\n             */\n            onConnect: null,\n\n            /**\n             * onClose callback\n             * @type {function}\n             */\n            onClose: null,\n\n            /**\n             * onError callback\n             * @type {function}\n             */\n            onError: null,\n\n            /**\n             * onReconnect callback\n             * @type {function}\n             */\n            onReconnect: null,\n\n            /**\n             * onReconnectSuccess callback\n             * @type {function}\n             */\n            onReconnectSuccess: null,\n\n            /**\n             * User provided WebSocket class\n             * @type {function}\n             */\n            ws: null,\n\n            /**\n             * User provided msgpack class\n             * @type {object}\n             */\n            serializer: new JsonSerializer()\n        };\n\n        if (this._isPlainObject(options)) {\n            this._options = this._merge(this._options, options);\n        } else if (this._isPlainObject(url)) {\n            this._options = this._merge(this._options, url);\n        }\n\n        if (this._url) {\n            this.connect();\n        }\n\n    }\n\n    /* Internal utils methods */\n    /**\n     * Internal logger\n     * @private\n     */\n    _log () {\n        if (this._options.debug) {\n            console.log(arguments);\n        }\n    }\n\n    /**\n     * Get the new unique request id\n     * @returns {number}\n     * @private\n     */\n    _getReqId () {\n        return ++this._cache.reqId;\n    }\n\n    /**\n     * Merge argument objects into one\n     * @returns {Object}\n     * @private\n     */\n    _merge () {\n        const obj = {}, l = arguments.length;\n        let i, attr;\n\n        for (i = 0; i < l; i++) {\n            for (attr in arguments[i]) {\n                obj[attr] = arguments[i][attr];\n            }\n        }\n\n        return obj;\n    }\n\n    /**\n     * Check if value is array\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isArray (obj) {\n        return (!!obj) && (Array.isArray(obj));\n    }\n\n    /**\n     * Check if value is object literal\n     * @param obj\n     * @returns {boolean}\n     * @private\n     */\n    _isPlainObject (obj) {\n        return (!!obj) && (obj.constructor === Object);\n    }\n\n    /**\n     * Fix websocket protocols based on options\n     * @private\n     */\n    _setWsProtocols () {\n        if (!(this._options.serializer instanceof JsonSerializer)) {\n            this._protocols.unshift('wamp.2.' + this._options.serializer.protocol);\n        }\n    }\n\n    /**\n     * Prerequisite checks for any wampy api call\n     * @param {string} topicURI\n     * @param {string} role\n     * @param {object} callbacks\n     * @returns {boolean}\n     * @private\n     */\n    _preReqChecks (topicURI, role, callbacks) {\n        let flag = true;\n\n        if (this._cache.sessionId && !this._cache.server_wamp_features.roles[role]) {\n            this._cache.opStatus = WAMP_ERROR_MSG['NO_' + role.toUpperCase()];\n            flag = false;\n        }\n\n        if (topicURI && !this._validateURI(topicURI)) {\n            this._cache.opStatus = WAMP_ERROR_MSG.URI_ERROR;\n            flag = false;\n        }\n\n        if (flag) {\n            return true;\n        }\n\n        if (this._isPlainObject(callbacks) && callbacks.onError) {\n            callbacks.onError({ error: this._cache.opStatus.description });\n        }\n\n        return false;\n    }\n\n    /**\n     * Validate uri\n     * @param {string} uri\n     * @returns {boolean}\n     * @private\n     */\n    _validateURI (uri) {\n        const re = /^([0-9a-zA-Z_]{2,}\\.)*([0-9a-zA-Z_]{2,})$/;\n        return !(!re.test(uri) || uri.indexOf('wamp') === 0);\n    }\n\n    /**\n     * Encode WAMP message\n     * @param {Array} msg\n     * @returns {*}\n     * @private\n     */\n    _encode (msg) {\n        try {\n            return this._options.serializer.encode(msg);\n        } catch (e) {\n            throw new Error('[wampy] encoding exception!');\n        }\n    }\n\n    /**\n     * Decode WAMP message\n     * @param  msg\n     * @returns {Promise}\n     * @private\n     */\n    _decode (msg) {\n        return this._options.serializer.decode(msg);\n    }\n\n    /**\n     * Send encoded message to server\n     * @param {Array} msg\n     * @private\n     */\n    _send (msg) {\n        if (msg) {\n            this._wsQueue.push(this._encode(msg));\n        }\n\n        if (this._ws && this._ws.readyState === 1 && this._cache.sessionId) {\n            while (this._wsQueue.length) {\n                this._ws.send(this._wsQueue.shift());\n            }\n        }\n    }\n\n    /**\n     * Reset internal state and cache\n     * @private\n     */\n    _resetState () {\n        this._wsQueue = [];\n        this._subscriptions = {};\n        this._subsTopics = new Set();\n        this._requests = {};\n        this._calls = {};\n        this._rpcRegs = {};\n        this._rpcNames = new Set();\n\n        // Just keep attrs that are have to be present\n        this._cache = {\n            reqId: 0,\n            reconnectingAttempts: 0\n        };\n    }\n\n    /**\n     * Initialize internal websocket callbacks\n     * @private\n     */\n    _initWsCallbacks () {\n        if (this._ws) {\n            this._ws.onopen = () => {\n                this._wsOnOpen();\n            };\n            this._ws.onclose = event => {\n                this._wsOnClose(event);\n            };\n            this._ws.onmessage = event => {\n                this._wsOnMessage(event);\n            };\n            this._ws.onerror = error => {\n                this._wsOnError(error);\n            };\n        }\n    }\n\n    /**\n     * Internal websocket on open callback\n     * @private\n     */\n    _wsOnOpen () {\n        const options = this._merge(this._options.helloCustomDetails, this._wamp_features),\n            serverProtocol = this._ws.protocol ? this._ws.protocol.split('.')[2] : '';\n\n        if (this._options.authid) {\n            options.authmethods = this._options.authmethods;\n            options.authid = this._options.authid;\n        }\n\n        this._log('[wampy] websocket connected');\n\n        if (this._options.serializer.protocol !== serverProtocol) {\n            // Server have chosen not our preferred protocol\n\n            // Falling back to json if possible\n            if (serverProtocol === 'json') {\n                this._options.serializer = new JsonSerializer();\n            } else {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_SERIALIZER_AVAILABLE;\n                return this;\n            }\n\n        }\n\n        const type = this._options.serializer.binaryType;\n\n        if (!isBinaryTypeAllowed(type)) {\n            this._cache.opStatus = WAMP_ERROR_MSG.INVALID_SERIALIZER_TYPE;\n            return this;\n        }\n\n        this._ws.binatyType = type;\n\n        // WAMP SPEC: [HELLO, Realm|uri, Details|dict]\n        // Sending directly 'cause it's a hello msg and no sessionId check is needed\n        this._ws.send(this._encode([WAMP_MSG_SPEC.HELLO, this._options.realm, options]));\n    }\n\n    /**\n     * Internal websocket on close callback\n     * @param {object} event\n     * @private\n     */\n    _wsOnClose (event) {\n        this._log('[wampy] websocket disconnected. Info: ', event);\n\n        // Automatic reconnection\n        if ((this._cache.sessionId || this._cache.reconnectingAttempts) &&\n            this._options.autoReconnect && this._cache.reconnectingAttempts < this._options.maxRetries && !this._cache.isSayingGoodbye) {\n            this._cache.sessionId = null;\n            this._cache.timer = setTimeout(\n                () => {\n                    this._wsReconnect();\n                },\n                this._options.reconnectInterval\n            );\n        } else {\n            // No reconnection needed or reached max retries count\n            if (this._options.onClose) {\n                this._options.onClose();\n            }\n\n            this._resetState();\n            this._ws = null;\n        }\n    }\n\n    /**\n     * Internal websocket on event callback\n     * @param {object} event\n     * @private\n     */\n    _wsOnMessage (event) {\n        this._log('[wampy] websocket message received', event.data);\n\n        this._decode(event.data).then(data => {\n\n            let id, i, msg, p;\n\n            switch (data[0]) {\n                case WAMP_MSG_SPEC.WELCOME:\n                    // WAMP SPEC: [WELCOME, Session|id, Details|dict]\n\n                    this._cache.sessionId = data[1];\n                    this._cache.server_wamp_features = data[2];\n\n                    if (this._cache.reconnectingAttempts) {\n                        // There was reconnection\n\n                        this._cache.reconnectingAttempts = 0;\n\n                        if (this._options.onReconnectSuccess) {\n                            this._options.onReconnectSuccess();\n                        }\n\n                        // Let's renew all previous state\n                        this._renewSubscriptions();\n                        this._renewRegistrations();\n\n                    } else {\n                        // Firing onConnect event on real connection to WAMP server\n                        if (this._options.onConnect) {\n                            this._options.onConnect();\n                        }\n                    }\n\n                    // Send local queue if there is something out there\n                    this._send();\n\n                    break;\n                case WAMP_MSG_SPEC.ABORT:\n                    // WAMP SPEC: [ABORT, Details|dict, Reason|uri]\n                    if (this._options.onError) {\n                        this._options.onError({ error: data[2], details: data[1] });\n                    }\n                    this._ws.close();\n                    break;\n                case WAMP_MSG_SPEC.CHALLENGE:\n                    // WAMP SPEC: [CHALLENGE, AuthMethod|string, Extra|dict]\n\n                    if (this._options.authid && typeof this._options.onChallenge === 'function') {\n\n                        p = new Promise((resolve, reject) => {\n                            resolve(this._options.onChallenge(data[1], data[2]));\n                        });\n\n                        p.then((key) => {\n\n                            // Sending directly 'cause it's a challenge msg and no sessionId check is needed\n                            this._ws.send(this._encode([WAMP_MSG_SPEC.AUTHENTICATE, key, {}]));\n\n                        }).catch(e => {\n                            this._ws.send(this._encode([\n                                WAMP_MSG_SPEC.ABORT,\n                                { message: 'Exception in onChallenge handler raised!' },\n                                'wamp.error.cannot_authenticate'\n                            ]));\n                            if (this._options.onError) {\n                                this._options.onError({ error: WAMP_ERROR_MSG.CRA_EXCEPTION.description });\n                            }\n                            this._ws.close();\n                            this._cache.opStatus = WAMP_ERROR_MSG.CRA_EXCEPTION;\n                        });\n\n                    } else {\n\n                        this._ws.send(this._encode([\n                            WAMP_MSG_SPEC.ABORT,\n                            { message: WAMP_ERROR_MSG.NO_CRA_CB_OR_ID.description },\n                            'wamp.error.cannot_authenticate'\n                        ]));\n                        if (this._options.onError) {\n                            this._options.onError({ error: WAMP_ERROR_MSG.NO_CRA_CB_OR_ID.description });\n                        }\n                        this._ws.close();\n                        this._cache.opStatus = WAMP_ERROR_MSG.NO_CRA_CB_OR_ID;\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.GOODBYE:\n                    // WAMP SPEC: [GOODBYE, Details|dict, Reason|uri]\n                    if (!this._cache.isSayingGoodbye) {    // get goodbye, initiated by server\n                        this._cache.isSayingGoodbye = true;\n                        this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.error.goodbye_and_out']);\n                    }\n                    this._cache.sessionId = null;\n                    this._ws.close();\n                    break;\n                case WAMP_MSG_SPEC.ERROR:\n                    // WAMP SPEC: [ERROR, REQUEST.Type|int, REQUEST.Request|id, Details|dict,\n                    //             Error|uri, (Arguments|list, ArgumentsKw|dict)]\n                    switch (data[1]) {\n                        case WAMP_MSG_SPEC.SUBSCRIBE:\n                        case WAMP_MSG_SPEC.UNSUBSCRIBE:\n                        case WAMP_MSG_SPEC.PUBLISH:\n                        case WAMP_MSG_SPEC.REGISTER:\n                        case WAMP_MSG_SPEC.UNREGISTER:\n\n                            this._requests[data[2]] && this._requests[data[2]].callbacks.onError &&\n                            this._requests[data[2]].callbacks.onError({\n                                error: data[4],\n                                details: data[3],\n                                argsList: data[5],\n                                argsDict: data[6]\n                            });\n                            delete this._requests[data[2]];\n\n                            break;\n                        case WAMP_MSG_SPEC.INVOCATION:\n                            break;\n                        case WAMP_MSG_SPEC.CALL:\n\n                            // WAMP SPEC: [ERROR, CALL, CALL.Request|id, Details|dict,\n                            //             Error|uri, Arguments|list, ArgumentsKw|dict]\n                            this._calls[data[2]] && this._calls[data[2]].onError &&\n                            this._calls[data[2]].onError({\n                                error: data[4],\n                                details: data[3],\n                                argsList: data[5],\n                                argsDict: data[6]\n                            });\n                            delete this._calls[data[2]];\n\n                            break;\n                        default:\n                            this._log('[wampy] Received non-compliant WAMP ERROR message');\n                            break;\n                    }\n                    break;\n                case WAMP_MSG_SPEC.SUBSCRIBED:\n                    // WAMP SPEC: [SUBSCRIBED, SUBSCRIBE.Request|id, Subscription|id]\n                    if (this._requests[data[1]]) {\n                        this._subscriptions[this._requests[data[1]].topic] = this._subscriptions[data[2]] = {\n                            id: data[2],\n                            callbacks: [this._requests[data[1]].callbacks.onEvent]\n                        };\n\n                        this._subsTopics.add(this._requests[data[1]].topic);\n\n                        if (this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.UNSUBSCRIBED:\n                    // WAMP SPEC: [UNSUBSCRIBED, UNSUBSCRIBE.Request|id]\n                    if (this._requests[data[1]]) {\n                        id = this._subscriptions[this._requests[data[1]].topic].id;\n                        delete this._subscriptions[this._requests[data[1]].topic];\n                        delete this._subscriptions[id];\n\n                        if (this._subsTopics.has(this._requests[data[1]].topic)) {\n                            this._subsTopics.delete(this._requests[data[1]].topic);\n                        }\n\n                        if (this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                    break;\n                case WAMP_MSG_SPEC.PUBLISHED:\n                    // WAMP SPEC: [PUBLISHED, PUBLISH.Request|id, Publication|id]\n                    if (this._requests[data[1]]) {\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.EVENT:\n                    if (this._subscriptions[data[1]]) {\n\n                        // WAMP SPEC: [EVENT, SUBSCRIBED.Subscription|id, PUBLISHED.Publication|id,\n                        //             Details|dict, PUBLISH.Arguments|list, PUBLISH.ArgumentKw|dict]\n\n                        i = this._subscriptions[data[1]].callbacks.length;\n                        while (i--) {\n                            this._subscriptions[data[1]].callbacks[i]({\n                                details: data[3],\n                                argsList: data[4],\n                                argsDict: data[5]\n                            });\n                        }\n\n                    }\n                    break;\n                case WAMP_MSG_SPEC.RESULT:\n                    if (this._calls[data[1]]) {\n\n                        // WAMP SPEC: [RESULT, CALL.Request|id, Details|dict,\n                        //             YIELD.Arguments|list, YIELD.ArgumentsKw|dict]\n\n                        this._calls[data[1]].onSuccess({\n                            details: data[2],\n                            argsList: data[3],\n                            argsDict: data[4]\n                        });\n                        if (!(data[2].progress && data[2].progress === true)) {\n                            // We receive final result (progressive or not)\n                            delete this._calls[data[1]];\n                        }\n\n                    }\n                    break;\n                // case WAMP_MSG_SPEC.REGISTER:\n                //     // WAMP SPEC:\n                //     break;\n                case WAMP_MSG_SPEC.REGISTERED:\n                    // WAMP SPEC: [REGISTERED, REGISTER.Request|id, Registration|id]\n                    if (this._requests[data[1]]) {\n                        this._rpcRegs[this._requests[data[1]].topic] = this._rpcRegs[data[2]] = {\n                            id: data[2],\n                            callbacks: [this._requests[data[1]].callbacks.rpc]\n                        };\n\n                        this._rpcNames.add(this._requests[data[1]].topic);\n\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n\n                    }\n                    break;\n                // case WAMP_MSG_SPEC.UNREGISTER:\n                //     // WAMP SPEC:\n                //     break;\n                case WAMP_MSG_SPEC.UNREGISTERED:\n                    // WAMP SPEC: [UNREGISTERED, UNREGISTER.Request|id]\n                    if (this._requests[data[1]]) {\n                        id = this._rpcRegs[this._requests[data[1]].topic].id;\n                        delete this._rpcRegs[this._requests[data[1]].topic];\n                        delete this._rpcRegs[id];\n\n                        if (this._rpcNames.has(this._requests[data[1]].topic)) {\n                            this._rpcNames.delete(this._requests[data[1]].topic);\n                        }\n\n                        if (this._requests[data[1]].callbacks && this._requests[data[1]].callbacks.onSuccess) {\n                            this._requests[data[1]].callbacks.onSuccess();\n                        }\n\n                        delete this._requests[data[1]];\n                    }\n                    break;\n                case WAMP_MSG_SPEC.INVOCATION:\n                    if (this._rpcRegs[data[2]]) {\n\n                        // WAMP SPEC: [INVOCATION, Request|id, REGISTERED.Registration|id,\n                        //             Details|dict, CALL.Arguments|list, CALL.ArgumentsKw|dict]\n\n                        p = new Promise((resolve, reject) => {\n                            resolve(this._rpcRegs[data[2]].callbacks[0]({\n                                details: data[3],\n                                argsList: data[4],\n                                argsDict: data[5]\n                            }));\n                        });\n\n                        p.then((results) => {\n                            // WAMP SPEC: [YIELD, INVOCATION.Request|id, Options|dict, (Arguments|list, ArgumentsKw|dict)]\n                            msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n\n                            if (this._isPlainObject(results)) {\n\n                                if (this._isPlainObject(results.options)) {\n                                    msg[2] = results.options;\n                                }\n\n                                if (this._isArray(results.argsList)) {\n                                    msg.push(results.argsList);\n                                } else if (typeof (results.argsList) !== 'undefined') {\n                                    msg.push([results.argsList]);\n                                }\n\n                                if (this._isPlainObject(results.argsDict)) {\n                                    if (msg.length === 3) {\n                                        msg.push([]);\n                                    }\n                                    msg.push(results.argsDict);\n                                }\n                            } else {\n                                msg = [WAMP_MSG_SPEC.YIELD, data[1], {}];\n                            }\n                            this._send(msg);\n                        }).catch(e => {\n                            let msg = [WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                                data[1], e.details || {}, e.error || 'wamp.error.invocation_exception'];\n\n                            if (e.argsList && this._isArray(e.argsList)) {\n                                msg.push(e.argsList);\n                            }\n\n                            if (e.argsDict && this._isPlainObject(e.argsDict)) {\n                                if (msg.length === 5) {\n                                    msg.push([]);\n                                }\n                                msg.push(e.argsDict);\n                            }\n                            this._send(msg);\n                        });\n\n                    } else {\n                        // WAMP SPEC: [ERROR, INVOCATION, INVOCATION.Request|id, Details|dict, Error|uri]\n                        this._send([WAMP_MSG_SPEC.ERROR, WAMP_MSG_SPEC.INVOCATION,\n                            data[1], {}, 'wamp.error.no_such_procedure']);\n                        this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_INVOCATION;\n                    }\n\n                    break;\n                // case WAMP_MSG_SPEC.INTERRUPT:\n                //     // WAMP SPEC:\n                //     break;\n                // case WAMP_MSG_SPEC.YIELD:\n                //     // WAMP SPEC:\n                //     break;\n                default:\n                    this._log('[wampy] Received non-compliant WAMP message');\n                    break;\n            }\n        }, err => console.error(err));\n    }\n\n    /**\n     * Internal websocket on error callback\n     * @param {object} error\n     * @private\n     */\n    _wsOnError (error) {\n        this._log('[wampy] websocket error');\n\n        if (this._options.onError) {\n            this._options.onError({ error: error });\n        }\n    }\n\n    /**\n     * Reconnect to server in case of websocket error\n     * @private\n     */\n    _wsReconnect () {\n        this._log('[wampy] websocket reconnecting...');\n\n        if (this._options.onReconnect) {\n            this._options.onReconnect();\n        }\n\n        this._cache.reconnectingAttempts++;\n        this._ws = getWebSocket(this._url, this._protocols, this._options.ws);\n        this._initWsCallbacks();\n    }\n\n    /**\n     * Resubscribe to topics in case of communication error\n     * @private\n     */\n    _renewSubscriptions () {\n        let i;\n        const subs = this._subscriptions,\n            st = this._subsTopics;\n\n        this._subscriptions = {};\n        this._subsTopics = new Set();\n\n        for (let topic of st) {\n            i = subs[topic].callbacks.length;\n            while (i--) {\n                this.subscribe(topic, subs[topic].callbacks[i]);\n            }\n        }\n    }\n\n    /**\n     * Reregister RPCs in case of communication error\n     * @private\n     */\n    _renewRegistrations () {\n        const rpcs = this._rpcRegs,\n            rn = this._rpcNames;\n\n        this._rpcRegs = {};\n        this._rpcNames = new Set();\n\n        for (let rpcName of rn) {\n            this.register(rpcName, { rpc: rpcs[rpcName].callbacks[0] });\n        }\n    }\n\n    /* Wampy public API */\n\n    /**\n     * Get or set Wampy options\n     *\n     * To get options - call without parameters\n     * To set options - pass hash-table with options values\n     *\n     * @param {object} [opts]\n     * @returns {*}\n     */\n    options (opts) {\n        if (typeof (opts) === 'undefined') {\n            return this._options;\n        } else if (this._isPlainObject(opts)) {\n            this._options = this._merge(this._options, opts);\n            return this;\n        }\n    }\n\n    /**\n     * Get the status of last operation\n     *\n     * @returns {object} with 2 fields: code, description\n     *      code: 0 - if operation was successful\n     *      code > 0 - if error occurred\n     *      description contains details about error\n     *      reqId: last send request ID\n     */\n    getOpStatus () {\n        return this._cache.opStatus;\n    }\n\n    /**\n     * Get the WAMP Session ID\n     *\n     * @returns {string} Session ID\n     */\n    getSessionId () {\n        return this._cache.sessionId;\n    }\n\n    /**\n     * Connect to server\n     * @param {string} [url] New url (optional)\n     * @returns {Wampy}\n     */\n    connect (url) {\n        if (url) {\n            this._url = url;\n        }\n\n        if (this._options.realm) {\n\n            const authp = (this._options.authid ? 1 : 0) +\n                ((this._isArray(this._options.authmethods) && this._options.authmethods.length) ? 1 : 0) +\n                (typeof this._options.onChallenge === 'function' ? 1 : 0);\n\n            if (authp > 0 && authp < 3) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_CRA_CB_OR_ID;\n                return this;\n            }\n\n            this._setWsProtocols();\n            this._ws = getWebSocket(this._url, this._protocols, this._options.ws);\n            if (!this._ws) {\n                this._cache.opStatus = WAMP_ERROR_MSG.NO_WS_OR_URL;\n                return this;\n            }\n            this._initWsCallbacks();\n\n        } else {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_REALM;\n        }\n\n        return this;\n    }\n\n    /**\n     * Disconnect from server\n     * @returns {Wampy}\n     */\n    disconnect () {\n        if (this._cache.sessionId) {\n            // need to send goodbye message to server\n            this._cache.isSayingGoodbye = true;\n            this._send([WAMP_MSG_SPEC.GOODBYE, {}, 'wamp.error.system_shutdown']);\n        } else if (this._ws) {\n            this._ws.close();\n        }\n\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n\n        return this;\n    }\n\n    /**\n     * Abort WAMP session establishment\n     *\n     * @returns {Wampy}\n     */\n    abort () {\n\n        if (!this._cache.sessionId && this._ws.readyState === 1) {\n            this._send([WAMP_MSG_SPEC.ABORT, {}, 'wamp.error.abort']);\n            this._cache.sessionId = null;\n        }\n\n        this._ws.close();\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n\n        return this;\n    }\n\n    /**\n     * Subscribe to a topic on a broker\n     *\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function - it will be treated as published event callback\n     *                          or it can be hash table of callbacks:\n     *                          { onSuccess: will be called when subscribe would be confirmed\n     *                            onError: will be called if subscribe would be aborted\n     *                            onEvent: will be called on receiving published event }\n     *\n     * @returns {Wampy}\n     */\n    subscribe (topicURI, callbacks) {\n        let reqId;\n\n        if (!this._preReqChecks(topicURI, 'broker', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { onEvent: callbacks };\n        } else if (!this._isPlainObject(callbacks) || typeof (callbacks.onEvent) === 'undefined') {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        if (!this._subscriptions[topicURI] || !this._subscriptions[topicURI].callbacks.length) {\n            // no such subscription or processing unsubscribing\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks: callbacks\n            };\n\n            // WAMP SPEC: [SUBSCRIBE, Request|id, Options|dict, Topic|uri]\n            this._send([WAMP_MSG_SPEC.SUBSCRIBE, reqId, {}, topicURI]);\n\n        } else {    // already have subscription to this topic\n            // There is no such callback yet\n            if (this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent) < 0) {\n                this._subscriptions[topicURI].callbacks.push(callbacks.onEvent);\n            }\n\n            if (callbacks.onSuccess) {\n                callbacks.onSuccess();\n            }\n        }\n\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * Unsubscribe from topic\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function - it will be treated as\n     *                          published event callback to remove or it can be hash table of callbacks:\n     *                          { onSuccess: will be called when unsubscribe would be confirmed\n     *                            onError: will be called if unsubscribe would be aborted\n     *                            onEvent: published event callback to remove }\n     * @returns {Wampy}\n     */\n    unsubscribe (topicURI, callbacks) {\n        let reqId, i = -1;\n\n        if (!this._preReqChecks(null, 'broker', callbacks)) {\n            return this;\n        }\n\n        if (this._subscriptions[topicURI]) {\n\n            reqId = this._getReqId();\n\n            if (typeof (callbacks) === 'undefined') {\n                this._subscriptions[topicURI].callbacks = [];\n                callbacks = {};\n            } else if (typeof callbacks === 'function') {\n                i = this._subscriptions[topicURI].callbacks.indexOf(callbacks);\n                callbacks = {};\n            } else if (callbacks.onEvent && typeof callbacks.onEvent === 'function') {\n                i = this._subscriptions[topicURI].callbacks.indexOf(callbacks.onEvent);\n            } else {\n                this._subscriptions[topicURI].callbacks = [];\n            }\n\n            if (i >= 0) {\n                this._subscriptions[topicURI].callbacks.splice(i, 1);\n            }\n\n            if (this._subscriptions[topicURI].callbacks.length) {\n                // There are another callbacks for this topic\n                this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n                return this;\n            }\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks: callbacks\n            };\n\n            // WAMP_SPEC: [UNSUBSCRIBE, Request|id, SUBSCRIBED.Subscription|id]\n            this._send([WAMP_MSG_SPEC.UNSUBSCRIBE, reqId, this._subscriptions[topicURI].id]);\n\n        } else {\n            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_UNSUBSCRIBE;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * Publish a event to topic\n     * @param {string} topicURI\n     * @param {string|number|Array|object} payload - optional parameter.\n     * @param {object} [callbacks] - optional hash table of callbacks:\n     *                          { onSuccess: will be called when publishing would be confirmed\n     *                            onError: will be called if publishing would be aborted }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { exclude: integer|array WAMP session id(s) that won't receive a published event,\n     *                                      even though they may be subscribed\n     *                            exclude_authid: string|array Authentication id(s) that won't receive\n     *                                      a published event, even though they may be subscribed\n     *                            exclude_authrole: string|array Authentication role(s) that won't receive\n     *                                      a published event, even though they may be subscribed\n     *                            eligible: integer|array WAMP session id(s) that are allowed\n     *                                      to receive a published event\n     *                            eligible_authid: string|array Authentication id(s) that are allowed\n     *                                      to receive a published event\n     *                            eligible_authrole: string|array Authentication role(s) that are allowed\n     *                                      to receive a published event\n     *                            exclude_me: bool flag of receiving publishing event by initiator\n     *                            disclose_me: bool flag of disclosure of publisher identity (its WAMP session ID)\n     *                                      to receivers of a published event }\n     * @returns {Wampy}\n     */\n    publish (topicURI, payload, callbacks, advancedOptions) {\n        let reqId, msg, err = false, hasPayload = false;\n        const options = {};\n\n        if (!this._preReqChecks(topicURI, 'broker', callbacks)) {\n            return this;\n        }\n\n        if (this._isPlainObject(callbacks)) {\n            options.acknowledge = true;\n        }\n\n        if (typeof (advancedOptions) !== 'undefined') {\n\n            if (this._isPlainObject(advancedOptions)) {\n                if (advancedOptions.exclude) {\n                    if (this._isArray(advancedOptions.exclude) && advancedOptions.exclude.length) {\n                        options.exclude = advancedOptions.exclude;\n                    } else if (typeof advancedOptions.exclude === 'number') {\n                        options.exclude = [advancedOptions.exclude];\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.exclude_authid) {\n                    if (this._isArray(advancedOptions.exclude_authid) && advancedOptions.exclude_authid.length) {\n                        options.exclude_authid = advancedOptions.exclude_authid;\n                    } else if (typeof advancedOptions.exclude_authid === 'string') {\n                        options.exclude_authid = [advancedOptions.exclude_authid];\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.exclude_authrole) {\n                    if (this._isArray(advancedOptions.exclude_authrole) && advancedOptions.exclude_authrole.length) {\n                        options.exclude_authrole = advancedOptions.exclude_authrole;\n                    } else if (typeof advancedOptions.exclude_authrole === 'string') {\n                        options.exclude_authrole = [advancedOptions.exclude_authrole];\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.eligible) {\n                    if (this._isArray(advancedOptions.eligible) && advancedOptions.eligible.length) {\n                        options.eligible = advancedOptions.eligible;\n                    } else if (typeof advancedOptions.eligible === 'number') {\n                        options.eligible = [advancedOptions.eligible];\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.eligible_authid) {\n                    if (this._isArray(advancedOptions.eligible_authid) && advancedOptions.eligible_authid.length) {\n                        options.eligible_authid = advancedOptions.eligible_authid;\n                    } else if (typeof advancedOptions.eligible_authid === 'string') {\n                        options.eligible_authid = [advancedOptions.eligible_authid];\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.eligible_authrole) {\n                    if (this._isArray(advancedOptions.eligible_authrole) && advancedOptions.eligible_authrole.length) {\n                        options.eligible_authrole = advancedOptions.eligible_authrole;\n                    } else if (typeof advancedOptions.eligible_authrole === 'string') {\n                        options.eligible_authrole = [advancedOptions.eligible_authrole];\n                    } else {\n                        err = true;\n                    }\n                }\n\n                if (advancedOptions.hasOwnProperty('exclude_me')) {\n                    options.exclude_me = advancedOptions.exclude_me !== false;\n                }\n\n                if (advancedOptions.hasOwnProperty('disclose_me')) {\n                    options.disclose_me = advancedOptions.disclose_me === true;\n                }\n\n            } else {\n                err = true;\n            }\n\n            if (err) {\n                this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError({ error: this._cache.opStatus.description });\n                }\n\n                return this;\n            }\n        }\n\n        reqId = this._getReqId();\n\n        switch (arguments.length) {\n            case 1:\n                break;\n            case 2:\n                hasPayload = true;\n                break;\n            default:\n                this._requests[reqId] = {\n                    topic: topicURI,\n                    callbacks: callbacks\n                };\n                hasPayload = true;\n                break;\n        }\n\n        // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri]\n        msg = [WAMP_MSG_SPEC.PUBLISH, reqId, options, topicURI];\n\n        if (hasPayload) {\n            // WAMP_SPEC: [PUBLISH, Request|id, Options|dict, Topic|uri, Arguments|list (, ArgumentsKw|dict)]\n            if (this._isArray(payload)) {\n                msg.push(payload);\n            } else if (this._isPlainObject(payload)) {\n                // It's a wampy unified form of payload passing\n                if (payload.argsList || payload.argsDict) {\n                    if (payload.argsList) {\n                        msg.push(payload.argsList);\n                    }\n\n                    if (payload.argsDict) {\n                        if (msg.length === 4) {\n                            msg.push([]);\n                        }\n                        msg.push(payload.argsDict);\n                    }\n                } else {\n                    msg.push([], payload);\n                }\n            } else {    // assume it's a single value\n                msg.push([payload]);\n            }\n        }\n\n        this._send(msg);\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * Remote Procedure Call\n     * @param {string} topicURI\n     * @param {string|number|Array|object} payload - can be either a value of any type or null\n     * @param {function|object} callbacks - if it is a function - it will be treated as result callback function\n     *                          or it can be hash table of callbacks:\n     *                          { onSuccess: will be called with result on successful call\n     *                            onError: will be called if invocation would be aborted }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { disclose_me: bool flag of disclosure of Caller identity (WAMP session ID)\n     *                                  to endpoints of a routed call\n     *                            receive_progress: bool flag for receiving progressive results. In this case\n     *                                  onSuccess function will be called every time on receiving result\n     *                            timeout: integer timeout (in ms) for the call to finish }\n     * @returns {Wampy}\n     */\n    call (topicURI, payload, callbacks, advancedOptions) {\n        let reqId, msg, err = false;\n        const options = {};\n\n        if (!this._preReqChecks(topicURI, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { onSuccess: callbacks };\n        } else if (!this._isPlainObject(callbacks) || typeof (callbacks.onSuccess) === 'undefined') {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        if (typeof (advancedOptions) !== 'undefined') {\n\n            if (this._isPlainObject(advancedOptions)) {\n                if (advancedOptions.hasOwnProperty('disclose_me')) {\n                    options.disclose_me = advancedOptions.disclose_me === true;\n                }\n\n                if (advancedOptions.hasOwnProperty('receive_progress')) {\n                    options.receive_progress = advancedOptions.receive_progress === true;\n                }\n\n                if (advancedOptions.hasOwnProperty('timeout')) {\n                    if (typeof advancedOptions.timeout === 'number') {\n                        options.timeout = advancedOptions.timeout;\n                    } else {\n                        err = true;\n                    }\n                }\n\n            } else {\n                err = true;\n            }\n\n            if (err) {\n                this._cache.opStatus = WAMP_ERROR_MSG.INVALID_PARAM;\n\n                if (this._isPlainObject(callbacks) && callbacks.onError) {\n                    callbacks.onError({ error: this._cache.opStatus.description });\n                }\n\n                return this;\n            }\n        }\n\n        do {\n            reqId = this._getReqId();\n        } while (reqId in this._calls);\n\n        this._calls[reqId] = callbacks;\n\n        // WAMP SPEC: [CALL, Request|id, Options|dict, Procedure|uri, (Arguments|list, ArgumentsKw|dict)]\n        msg = [WAMP_MSG_SPEC.CALL, reqId, options, topicURI];\n\n        if (payload !== null) {\n            if (this._isArray(payload)) {\n                msg.push(payload);\n            } else if (this._isPlainObject(payload)) {\n                // It's a wampy unified form of payload passing\n                if (payload.argsList || payload.argsDict) {\n                    if (payload.argsList) {\n                        msg.push(payload.argsList);\n                    }\n\n                    if (payload.argsDict) {\n                        if (msg.length === 4) {\n                            msg.push([]);\n                        }\n                        msg.push(payload.argsDict);\n                    }\n                } else {\n                    msg.push([], payload);\n                }\n            } else {    // assume it's a single value\n                msg.push([payload]);\n            }\n        }\n\n        this._send(msg);\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n        return this;\n    }\n\n    /**\n     * RPC invocation cancelling\n     *\n     * @param {int} reqId RPC call request ID\n     * @param {function|object} callbacks - if it is a function - it will be called if successfully\n     *                          sent canceling message or it can be hash table of callbacks:\n     *                          { onSuccess: will be called if successfully sent canceling message\n     *                            onError: will be called if some error occurred }\n     * @param {object} advancedOptions - optional parameter. Must include any or all of the options:\n     *                          { mode: string|one of the possible modes:\n     *                                  \"skip\" | \"kill\" | \"killnowait\". Skip is default.\n     *                          }\n     *\n     * @returns {Wampy}\n     */\n    cancel (reqId, callbacks, advancedOptions) {\n        const options = { mode: 'skip' };\n\n        if (!this._preReqChecks(null, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (!reqId || !this._calls[reqId]) {\n            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_REQ_ID;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        if ((typeof (advancedOptions) !== 'undefined') &&\n            (this._isPlainObject(advancedOptions)) &&\n            (advancedOptions.hasOwnProperty('mode'))) {\n\n            options.mode = /skip|kill|killnowait/.test(advancedOptions.mode) ? advancedOptions.mode : 'skip';\n        }\n\n        // WAMP SPEC: [CANCEL, CALL.Request|id, Options|dict]\n        this._send([WAMP_MSG_SPEC.CANCEL, reqId, options]);\n        this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n        this._cache.opStatus.reqId = reqId;\n\n        callbacks.onSuccess && callbacks.onSuccess();\n\n        return this;\n    }\n\n    /**\n     * RPC registration for invocation\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function - it will be treated as rpc itself\n     *                          or it can be hash table of callbacks:\n     *                          { rpc: registered procedure\n     *                            onSuccess: will be called on successful registration\n     *                            onError: will be called if registration would be aborted }\n     * @returns {Wampy}\n     */\n    register (topicURI, callbacks) {\n        let reqId;\n\n        if (!this._preReqChecks(topicURI, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { rpc: callbacks };\n        } else if (!this._isPlainObject(callbacks) || typeof (callbacks.rpc) === 'undefined') {\n            this._cache.opStatus = WAMP_ERROR_MSG.NO_CALLBACK_SPEC;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n            return this;\n        }\n\n        if (!this._rpcRegs[topicURI] || !this._rpcRegs[topicURI].callbacks.length) {\n            // no such registration or processing unregistering\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks: callbacks\n            };\n\n            // WAMP SPEC: [REGISTER, Request|id, Options|dict, Procedure|uri]\n            this._send([WAMP_MSG_SPEC.REGISTER, reqId, {}, topicURI]);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n        } else {    // already have registration with such topicURI\n            this._cache.opStatus = WAMP_ERROR_MSG.RPC_ALREADY_REGISTERED;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n        }\n\n        return this;\n\n    }\n\n    /**\n     * RPC unregistration for invocation\n     * @param {string} topicURI\n     * @param {function|object} callbacks - if it is a function, it will be called on successful unregistration\n     *                          or it can be hash table of callbacks:\n     *                          { onSuccess: will be called on successful unregistration\n     *                            onError: will be called if unregistration would be aborted }\n     * @returns {Wampy}\n     */\n    unregister (topicURI, callbacks) {\n        let reqId;\n\n        if (!this._preReqChecks(topicURI, 'dealer', callbacks)) {\n            return this;\n        }\n\n        if (typeof callbacks === 'function') {\n            callbacks = { onSuccess: callbacks };\n        }\n\n        if (this._rpcRegs[topicURI]) {   // there is such registration\n\n            reqId = this._getReqId();\n\n            this._requests[reqId] = {\n                topic: topicURI,\n                callbacks: callbacks\n            };\n\n            // WAMP SPEC: [UNREGISTER, Request|id, REGISTERED.Registration|id]\n            this._send([WAMP_MSG_SPEC.UNREGISTER, reqId, this._rpcRegs[topicURI].id]);\n            this._cache.opStatus = WAMP_ERROR_MSG.SUCCESS;\n            this._cache.opStatus.reqId = reqId;\n        } else {    // there is no registration with such topicURI\n            this._cache.opStatus = WAMP_ERROR_MSG.NON_EXIST_RPC_UNREG;\n\n            if (this._isPlainObject(callbacks) && callbacks.onError) {\n                callbacks.onError({ error: this._cache.opStatus.description });\n            }\n\n        }\n\n        return this;\n    }\n}\n\nexport default Wampy;\nexport {Wampy};\n"]}